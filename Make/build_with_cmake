#!/bin/tcsh -f 

# set echo 

##################################################################################
#
# Build script for imported libraries and utilities that use cmake. This script
# starts its life as:
#     src/Make/build_with_cmake
#
# It then gets copied to where a 3rd part source code base is (typically
# src/shared). Often it gets renamed to build_ivilab. Finally, it gets tweaked
# for the particular code base. 
#
#
##################################################################################
#

# This next part is shared by all files in Make whose names begin with "build",
# AND ivi_add_makefiles. Updates should be propogated. 

if ($?FORCE_IVI_SRC_DIR) then 
    if (-e "${FORCE_IVI_SRC_DIR}/Make/init_compile") then 
        setenv IVI_SRC_PATH "${FORCE_IVI_SRC_DIR}"
    else 
        bash -c 'echo "Env var FORCE_IVI_SRC_DIR is set to ${FORCE_IVI_SRC_DIR}, but ${FORCE_IVI_SRC_DIR}/Make/init_compile does not exist." >&2'
        exit 1 
    endif 
else  
    # Use env var for IVI_DIRS for better error reporting via bash sub-shell.
    if ($?FORCE_IVI_DIR) then
        setenv IVI_DIRS "${FORCE_IVI_DIR}"
    else
        setenv IVI_DIRS ". kjb KJB ivi IVI src"
    endif 

    # Find out where we are in the source tree. In particular, we want to find a
    # directory that has one of the directories in IVI_DIRS as a subdir, which
    # itself has Make as a sub-dir and Make/init_compile as a file in that. 

    set found = 0
    set ivi_top = ""

    pushd `pwd` > /dev/null

    while ("`pwd`" != "/")
        foreach ivi_dir (${IVI_DIRS}) 
            if ("${ivi_dir}" == ".") then
                set ivi_dir = ""
            else
                set ivi_dir = "${ivi_dir}/"
            endif 

            if (-e "${ivi_dir}Make/init_compile") then
                set found = 1
                break
            endif 
        end

        if (${found}) break

        set ivi_top = "../${ivi_top}"

        cd ..
    end

    popd > /dev/null

    if (${found}) then
        if ("${ivi_dir}" == "") then
            set ivi_dir = "./"
        endif 

        setenv IVI_SRC_PATH "${ivi_top}${ivi_dir}"
    else 
        # We cannot use P_STDERR here because we might not have defined it yet.
        bash -c 'echo " " >&2'
        bash -c 'echo "This directory is not below a directory with IVI installed." >&2'
        bash -c 'echo "Valid directories for IVI in this context: ${IVI_DIRS}." >&2'
        bash -c 'echo "To experiment with a temporary fix, try setting FORCE_IVI_SRC_DIR." >&2'
        bash -c 'echo "For a more permanent fix, edit $0 or contact Kobus." >&2'
        exit 1
    endif 
endif 

pushd ${IVI_SRC_PATH} > /dev/null
    setenv IVI_SRC_PATH "${cwd}/"
popd > /dev/null

# Check that this file ($0) is up to date compared to the reference one.
set need_to_replace_myself = `${IVI_SRC_PATH}Make/scripts/test_older_than "$0" "${IVI_SRC_PATH}Make/build"`
     
if (${need_to_replace_myself}) then
    # We could make this even more automated using the defunct script
    # self_update, but this is too fancy. It cannot do the rebuild in parallel,
    # and we would want to implement checking for infinite recursion.  Using
    # self_update is commented out here:
    #     exec ${IVI_SRC_PATH}Make/scripts/self_update "$0" "${IVI_SRC_PATH}Make/build" Make

    echo "Script $0 is attempting to rebuild itself."
    echo "You will need to reenter your build command (e.g., make or $0)."
    exec /bin/cp "${IVI_SRC_PATH}Make/build" "$0"
endif 

################################################################################

setenv ONLY_GET_BUILD_ENV
source ${IVI_SRC_PATH}Make/scripts/build-2 

################################################################################

# Typically cmake builds have no opinion about what make should be. So we assume
# that it is most tested by simply typing "make". This feels safer than using
# our fancy system which is commented out below. 
#
set ivi_make = "make" 

# if ($?FORCE_) then
#     if ($?IVI_VERBOSE) then
#         echo "Forcing a serial make due to env var FORCE_SERIAL being set"
#     endif 
# 
#     set ivi_make = "${IVI_MAKE_SERIAL}"
# else 
#     set ivi_make = "${IVI_MAKE}"
# endif 
# 
# if ($?FORCE_STOP) then
#     if ($?IVI_VERBOSE) then
#         echo "Forcing stopping after an error due to env var FORCE_STOP being set"
#     endif 
# 
#     set ivi_make = "${ivi_make} ${IVI_MAKE_OPTS_STOP}"
# endif 

################################################################################

# Cmake specific builds 

# Controlling cmake output, reference a stackexchange post.
#
# 1) We can make with 
#        make VERBOSE=1
# 2) cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON .
# 3) 
# cmake -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON .
#
# For 1) we could do this based on IVI_VERBOSE
# However, generally we build code shared by others until it works, and then
# stop (rather than develop it, which we do sometimes, but often with a
# different paradigm.) So odds are that we want messages. 

set CMAKE_FLAGS =  "" 

set CMAKE_VERBOSE_FLAGS = "cmake -DCMAKE_RULE_MESSAGES:BOOL=OFF -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON"
set CMAKE_FLAGS = "${CMAKE_FLAGS} ${CMAKE_VERBOSE_FLAGS}" 

# Example, using OPENFACE 
# set CMAKE_OPENFACE_FLAGS = "-D WITH_TBB=ON -D BUILD_SHARED_LIBS=OFF"
# set CMAKE_FLAGS = "${CMAKE_OPENFACE_FLAGS} ${CMAKE_FLAGS}
#
# Example, using OPENCV
# set CMAKE_OPENCV_FLAGS "-D WITH_TBB=ON -D WITH_GTK=OFF -D BUILD_SHARED_LIBS=ON -DWITH_IPP=OFF"
# set CMAKE_FLAGS = "${CMAKE_OPENCV_FLAGS} ${CMAKE_FLAGS}

set build_dir = "build_$MACHINE"

${IVI_MKDIR} $build_dir
if ($status) exit 1 

pushd $build_dir > /dev/null
    if ($status) exit 1 

#     /bin/rm -f CMakeCache.txt 
#     if ($status) exit 1 

    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=local_install ${CMAKE_FLAGS}  ..
    if ($status) exit 1 

#     ${IVI_MAKE} clean 
#     if ($status) exit 1 

    ${IVI_MAKE} 
    if ($status) exit 1 

    ${IVI_MAKE} install 
    if ($status) exit 1 

    rsync -a -u -v local_install/lib/ ${INSTALL_LOAD_DIR} 
    if ($status) exit 1 

    # There should some way to tell cmake to INSTALL_THIRD_PARTY stuff, but
    # Kobus has yet to find it a general solution. This shows a hack used for
    # OpenFace.
    #
#     rsync -a -u -v lib/3rdParty/dlib/libdlib.a ${INSTALL_LOAD_DIR} 
#     if ($status) exit 1 

    rsync -a -u -v local_install/bin/ ${INSTALL_BIN_DIR} 
    if ($status) exit 1 

    rsync -a -u -v local_install/include/ ${INSTALL_INCLUDE_DIR} 
    if ($status) exit 1 

    # Sometimes there are support files such as trained classifiers. Here we
    # show how it is done for OpenFace. 
    #
#     rsync -a -u -v local_install/etc/ ${INSTALL_DATA_DIR} 
#     if ($status) exit 1 
# 
#     rsync -a -u -v local_install/etc/ ${INSTALL_DATA_DIR} 
#     if ($status) exit 1 

popd > /dev/null

# Sometimes there is data for testing etc that is not built. We might want to
# copy some of it. Here is how it is hacked for OpenFace. 

# rsync -a -u -v videos ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 
# 
# rsync -a -u -v imgs ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 
# 
# rsync -a -u -v image_sequence ${INSTALL_DATA_DIR}/OpenFace
# if ($status) exit 1 








