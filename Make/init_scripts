
# It is easiest if this file does not emit any output unless there is a fatal
# error. 
#
# Do not do anthing related top user choices in this file, as it typically gets sourced
# only once per tcsh.
#
# This file contains overlap between what general scripts need and what
# compiling needs. It is sourced from init_compile, and possibly from other
# scripts, and often from .tcshrc.
#
# Rather than select exactly the overlap, we include all members of a logical
# group, e.g., all variables about Make paths or general system commands. 

# Usually we have MAKE_PATH but not always.
#
if (! $?MAKE_PATH) then
    if ($?IVI_SRC_PATH) then
        setenv MAKE_PATH ${IVI_SRC_PATH}Make/
    else if (-d "${HOME}/sbin/Make") then
        # This for root set up Kobus's way. Root does not substribe to the svn
        # version of things such as src and Make for security concerns.
        setenv MAKE_PATH "${HOME}/sbin/Make/" 
    else 
        echo "Script init_scripts unable to set MAKE_PATH."
        echo "Likely it does not have a viable IVI_SRC_PATH"
        echo "This needs to be fixed before we can do anything."
        exit 1
    endif
endif 

# Invariably we have IVI_HAVE_MACHINE, but if we do not, the we need to source
# init_machine as to be standalone. This could be a different copy than the one
# that build sources before sourcing this file (init_scripts).
# 
if (! $?IVI_HAVE_MACHINE) then
    source "${MAKE_PATH}init_machine"
    if ($status) exit $status
endif 

# If we are "cold" then we do not have MAKE_SCRIPT_PATH. 
#
if ( ! $?MAKE_SCRIPT_PATH) then
    setenv MAKE_SCRIPT_PATH "${MAKE_PATH}scripts/"
endif 

set error_found = 0

# ##############################################################################

# Bootstrap. We rely on "sed"

unalias sed
setenv IVI_SED_PATH `which sed`

if (${status}) then
    if (-x "/usr/bin/sed") then
        setenv IVI_SED_PATH  "/usr/bin/sed"
    else if (-x "/bin/sed") then
        setenv IVI_SED_PATH  "/bin/sed"
    else 
        echo "Script init_scripts unable to find 'sed'."
        echo "We checked at least /usr/bin/sed and /bin/sed."
        echo "This needs to be fixed before we can do anything."
        exit 1
    endif 
endif 

setenv IVI_SED "${IVI_SED_PATH}"

# ##############################################################################

if (! $?HOST) then
    setenv HOST unknown
endif

if (! $?SHORT_HOST) then
    set first_name = `echo ${HOST} | ${IVI_SED} 's/\..*//'`

    if ($first_name != "") then
        setenv SHORT_HOST ${first_name}
    else
        setenv SHORT_HOST "${HOST}"
    endif
endif 

# ##############################################################################

# The construction of a list of places to look for build software should be consistent
# with Kobus's login scripts. For build tools, we first look in this list, and
# then in the user's path. 

set path_dirs = ""

# For Ocelote, probably obsolete, needs checking. TODO
set path_dirs = "${path_dirs} /cm/local/apps/gcc/current/bin /cm/shared/apps/pbspro/current/sbin /cm/shared/apps/pbspro/current/bin /cm/shared/uabin"

# These are for El Gato. Almost certainly obsolete. TODO 
set path_dirs = "${path_dirs} /shared/ibm/platform_lsf/9.1/linux2.6-glibc2.3-x86_64/etc /shared/ibm/platform_lsf/9.1/linux2.6-glibc2.3-x86_64/bin"

# "LOCAL" paths and /misc with the string "local" in them are checked first, 
# followed by other dirs such as those under "opt".  

set path_dirs = "${path_dirs} /opt/local/bin /opt/local/sbin /opt/local/texbin /opt/bin /opt/gcc/bin /opt/java/bin /opt/X11/bin "
set path_dirs = "${path_dirs} /usr/local/texbin /usr/local/cuda/bin /usr/local/bin /usr/local/sbin /usr/local/X11R6/bin /usr/local/X11/bin"
set path_dirs = "${path_dirs} /misc/local/bin /misc/loca/sbin /misc/local/texbin"

# Once all places that could reasonably expect to sometimes override the
# standard places have been checked, add the standard places.

set path_dirs = "${path_dirs} /usr/texbin /usr/contrib/bin /usr/contrib/bin/X11 /Developer/usr/bin"
set path_dirs = "${path_dirs} /usr/bin /usr/sbin /usr/X11R6/bin /usr/X11/bin"
set path_dirs = "${path_dirs} /bin /sbin"

setenv IVI_PATH_DIRS ""
foreach path_dir (${path_dirs}) 
    if (-d "${path_dir}") then
        setenv IVI_PATH_DIRS "${IVI_PATH_DIRS} ${path_dir}"
    endif 
end

# echo IVI_PATH_DIRS: ${IVI_PATH_DIRS}

# ##############################################################################

if (! $?IVI_WARN_LEVEL) then
    setenv IVI_WARN_LEVEL 2
endif

setenv BEEP ''

# if (-e /dev/stderr) then
#     setenv P_STDERR "echo > /dev/stderr"
# else 
    setenv P_STDERR "${MAKE_PATH}scripts/p_stderr PSE: "
# endif 

setenv WARN_ECHO "${MAKE_PATH}scripts/p_stderr WRN: "

# For single lines of verbose echoes. For blocks of text, use an "if" as usual. 
# Kobus needs to sync this code with duplicated code in his .cshrc
if ($?IVI_VERBOSE) then
    setenv VERBOSE_ECHO "echo IVB: "
else if ($?tcsh) then
    setenv VERBOSE_ECHO ": "
else 
    setenv VERBOSE_ECHO "eval echo > /dev/null "
endif 

setenv VERBOSE_INDENT ""

# For single lines of verbose echoes. For blocks of text, use an "if" as usual. 
# Kobus needs to sync this code with duplicated code in his .cshrc
if ($?IVI_VERBOSE_2) then
    setenv VERBOSE_ECHO_2 "echo VB2: "
else if ($?tcsh) then
    setenv VERBOSE_ECHO_2 ": "
else 
    setenv VERBOSE_ECHO_2 "eval echo > /dev/null"
endif 

# Kobus needs to sync this code with duplicated code in his .cshrc
if (($?prompt) && (! $?IVI_QUIET)) then
    setenv ECHO "echo "
else if ($?tcsh) then
    setenv ECHO ":  "
else 
    setenv ECHO "eval echo > /dev/null"
endif 

# --------------------------------------------------------------------------------------------

setenv IVI_ECHO             "echo"

# Which is builtin, so "which which" may not work. On Kobus's mac, tcsh's
# builtin which does not properly support '-s'. So we avoid -s, but also try to
# use the canonical one if we can find it.

if (-x /usr/bin/which) then
    setenv IVI_WHICH /usr/bin/which
else
    setenv IVI_WHICH which
endif 

# Essential programs are ones that are relied on by init_compile, basic program
# building, and scripts that need to run as daemons or via cron jobs (e.g.,
# git/svn sync. Many of them are common in scripts without full path or "IVI_" and/or the
# "IVI_" versions defined below might not have paths to reduce clutter and/or we
# will assume that we have a valid path if we to create a version that will
# never get confused by an alias. So we need to check that they are in our PATH.
# If an essential program is not found, this script will eventually exit with
# error. 
#
# Desired programs are handled similarly, but their absence is reported as a
# warning, and there absence does not lead to error exit. 
#
# In the list below, essential and desired programs are separated by ":"


# Essential. 
#     Egrep is used in stream file names. 
#
set needed_progs = "test cat cp mv rm mkdir file grep ls ln touch chmod gzip makedepend date tee egrep tr"

# Desired (used often enough that a warning makes sense). If these are not
# found, the path is set to the program name for better error messages. The
# colon begins the optional ones. 
set needed_progs = "${needed_progs} : awk stat tail head doxygen ctags sort"

# Others that we want to test if they exist, but we do not expect them to always
# be available.  If these are not found, the path is set to the empty string so
# we can test if we found it.
set needed_progs = "${needed_progs} : flock lockfile-create lockfile-remove"

set essential =  1
set desired =  1

foreach needed_prog (${needed_progs})
    if ("${needed_prog}" == ":") then
        if (${essential}) then
            set essential = 0
            continue
        else if (${desired}) then
            set desired = 0
            continue
        endif 
    endif 

    unalias "${needed_prog}"

    set found = 0
    foreach path_dir (${IVI_PATH_DIRS})
        if (-x "${path_dir}/${needed_prog}") then
            set prog_path = "${path_dir}/${needed_prog}"
            set found =  1
            break
        endif 
    end 

    if (! ${found}) then 
        set prog_path = `${IVI_WHICH} "${needed_prog}"`
        if (! ${status}) then 
            set found = 1
        endif 
    endif 
    
    if (! ${found}) then 
        if (${essential}) then
            ${P_STDERR} "Script init_scripts cannot find essential program ${needed_prog} in IVI locations."
            # Set the path to be the program name for better errors. 
            set prog_path = "${needed_prog}" 
            set error_found = 1
        else if (${desired}) then
            ${P_STDERR} "Warning: Script init_scripts cannot find non-essential program ${needed_prog} in IVI locations."
            ${P_STDERR} "    Some things you might do will break."
            # Set the path to be the program name for better errors. 
            set prog_path = "${needed_prog}" 
        else 
            set prog_path = ""
        endif 
    endif

    set uc_needed_prog = `echo ${needed_prog} | ${IVI_SED} "y/abcdefghijklmnopqrstuvwxyz-/ABCDEFGHIJKLMNOPQRSTUVWXYZ_/"`

    # The PATH versions encods the program path, the non PATH versions might
    # become the PATH versions with options in what follows.
    eval "setenv IVI_${uc_needed_prog}_PATH ${prog_path}"

    # This default gets overwritten below if we want to specify program options. 
    eval "setenv IVI_${uc_needed_prog} ${prog_path}"
end
        
# It is good to declare a path to "test" if you can find one, as people often
# create test programs called "test"!!!} is not in PATH, nor 

# Copy where links point to, not their contents. 
if ("${OS}" == "mac_osx") then
    setenv IVI_CP               "${IVI_CP_PATH} -f -R"
else if (("${OS}" == "linux_x86_64") || ("${OS}" == "linux_386")) then
    setenv IVI_CP               "${IVI_CP_PATH} -r -f -d"
else
    setenv IVI_CP               "${IVI_CP_PATH} -r -f"
endif 

setenv IVI_RM               "${IVI_RM_PATH} -r -f"

# More readable? There is a trade-off here, but this is how we do it. 
setenv IVI_GREP             "grep"
setenv IVI_EGREP            "egrep"
setenv IVI_FILE             "${IVI_FILE_PATH}"

# A version of ls that outputs one file per line. Most if not all ls's do so
# when the output is not a terminal. However, we can use the '-1' option for
# clarity and robustness.
setenv IVI_LS               "${IVI_LS_PATH} -1"
setenv IVI_LN               "${IVI_LN_PATH} -s -f"
setenv IVI_TOUCH            "${IVI_TOUCH_PATH}"
setenv IVI_TOUCH_1990       "${IVI_TOUCH_PATH} -t 199001010000"
setenv IVI_PERMIT_EXECUTION "${IVI_CHMOD_PATH} -R a+rx"
setenv IVI_PERMIT_READ      "${IVI_CHMOD_PATH} -R a+rX"
setenv IVI_MKDIR            "${IVI_MKDIR_PATH} -p"

# setenv IVI_COMPRESS bzip2
# setenv IVI_COMPRESS_SUFFIX bz2IVI}_${uc_needed_pro
#
# Back to gzip --- It does not compress quite as well, but is more convenient
#
setenv IVI_COMPRESS             "${IVI_GZIP_PATH}"
setenv IVI_COMPRESS_SUFFIX      "gz"

# ---------------------------------------------------------------------

setenv IVI_ECHO_TIME "${IVI_DATE} +%H:%M:%S"
setenv IVI_ECHO_DATE "${IVI_DATE} +%y_%m_%d"

# ---------------------------------------------------------------------

setenv IVI_STAT_FLAVOR "NONE"

if ("${IVI_STAT}" != "") then 
    set gnu_stat = `${IVI_STAT} --version |& grep 'GNU coreutils'`
    if ((! ${status} ) && ("${gnu_stat}" != "")) then
        setenv IVI_STAT_FLAVOR "gnu"
    else 
        set bsd_stat = `${IVI_STAT} -s . |& grep 'st_mtime'`
        if ((! ${status} ) && ("${bsd_stat}" != "")) then
            setenv IVI_STAT_FLAVOR "bsd"
        endif
    endif
endif

# ---------------------------------------------------------------------

if (! $?TMPDIR) then
    setenv TMPDIR "/tmp"
endif

if (! $?USER) then
    ${ECHO} 'Script init_scripts reports $USER variable not defined.'
    set error_found = 1
endif

setenv USER_TEMP_PATH  "$TMPDIR/$USER/"
    
if (! -e "${USER_TEMP_PATH}") then
    ${IVI_MKDIR} "${USER_TEMP_PATH}"
    if (${status}) then
        ${P_STDERR} "Creation of $USER_TEMP_PATH failed in init_scripts."
        set error_found = 1
    endif
else if (! -w "${USER_TEMP_PATH}") then
    ${P_STDERR} "Script init_scripts reports ${USER_TEMP_PATH} is not writable."
    set error_found = 1
endif

# --------------------------------------------------------------------------------------------

if (-e /scratch) then
    setenv IVI_LOCKFILE_DEFAULT_PATH "/scratch/${USER}/lockfiles/"
else
    setenv IVI_LOCKFILE_DEFAULT_PATH "${USER_TEMP_PATH}lockfiles/"
endif

setenv IVI_LOCKFILE_LOCAL_PATH "${USER_TEMP_PATH}lockfiles/"

# --------------------------------------------------------------------------------------------

if (${error_found}) exit 1 

setenv IVI_HAVE_INIT_SCRIPTS 1 

