# 
# This is the main makefile for library modules.  This is copied from
# $(MAKE_PATH)/Makefile-library to each library directory, and the string "LIB
# underscore COMPONENT" is replaced by a string for the particular library. 
#
# Why copy?
#     While it might seem better to simply define the lib component symbols
#     external to a single copy of this file and include it (like we do for
#     programs), this does not work as well because a program that uses multiple
#     library components will include this file multiple times, and the effect
#     of setting the variable and then including the file means that protocol
#     for variable expansion needs to be specified, and that is complicated and
#     also depends on the flavor of make. 

# The following make flavor dependent defines, which are already set by the time
# we are in this file, are expanded versions of the patterns noted (for
# convenient reference). 
#
#      LIB_COMPONENT_C_FILES     (not used and not defined (commented out))
#         $(LIB_COMPONENT_REAL_SRC_DIR)*.c
#
#     LIB_COMPONENT_CXX_FILES    (not used and not defined (commented out)) 
#        $(LIB_COMPONENT_REAL_SRC_DIR)*.C $(LIB_COMPONENT_REAL_SRC_DIR)*.cpp $(LIB_COMPONENT_REAL_SRC_DIR)*.cxx
#
#     LIB_COMPONENT_SOURCE_FILES  (used?) 
#         $(LIB_COMPONENT_REAL_SRC_DIR)*.[cC] $(LIB_COMPONENT_REAL_SRC_DIR)*.cpp $(LIB_COMPONENT_REAL_SRC_DIR)*.cxx
#
#     LIB_COMPONENT_HEADER_FILES 
#         $(LIB_COMPONENT_REAL_SRC_DIR)*.h $(LIB_COMPONENT_REAL_SRC_DIR)*.[hit]pp $(LIB_COMPONENT_REAL_SRC_DIR)*.[hit]xx
#
#     LIB_COMPONENT_FILES (currently used) 
#         $(LIB_COMPONENT_REAL_SRC_DIR)*.[chC] $(LIB_COMPONENT_REAL_SRC_DIR)*.[chit]pp $(LIB_COMPONENT_REAL_SRC_DIR)*.[chit]xx
# 
# A note about file pattern expansion. 
#     File pattern expansion is make flavor dependent, and also can lead to
#     annoying failures when the pattern does not match, but what you want is
#     simply a null result. We only need to rely on make pattern expansion for
#     rules. Pattern use could probably be purged from commands using scripts
#     instead. 

################################################################################
#         Synchronizing Makefile and build with src/Make 
#
# The files "Makefile and "build" are strict copies of the ones in src/Make.  If
# they are updated, we want to get a copy. The synchronization may not be in time
# for this invocation of make, hence we provide an message about that. Note that
# GNU make tries to update make files that it reads and rebuild the dependency
# graphs as a result. When this works (I am not convinced it is robust), we get
# updated sooner. However, since it does not always work, and since we try to
# support other versions of make, we also specify "Makefile" and "build" as
# targets below. 
# 
# Why are Makefile and build copies? 
#     We cannot point to the ones in $(MAKE_PATH) because they implement figuring
#     out the value of MAKE_PATH. 

$(LIB_COMPONENT_SRC_DIR)Makefile : $(MAKE_PATH)Makefile
	@$(IVI_ECHO) " "
	@$(IVI_ECHO) "Updating Makefile from $(MAKE_PATH) in $(LIB_COMPONENT_REAL_SRC_DIR)."
	@$(IVI_ECHO) "This will affect future compiles, but not this one."
	$(IVI_CP) $(MAKE_PATH)Makefile $@ 
	@$(IVI_ECHO) " "

# The LHS and RHS could be the same target if we are in
# $(LIB_COMPONENT_SRC_DIR). But it seems to work out anyway.
#
Makefile : $(LIB_COMPONENT_SRC_DIR)Makefile

$(LIB_COMPONENT_SRC_DIR)build : $(MAKE_PATH)build
	@$(IVI_ECHO) " "
	@$(IVI_ECHO) "Updating $@ from $(MAKE_PATH) in `pwd`."
	@$(IVI_ECHO) "This will affect future compiles, but not this one."
	$(IVI_CP) $(MAKE_PATH)build $@ 
	@$(IVI_ECHO) " "

# This won't happen very often because build updates itself, but it is possible.
#
# The LHS and RHS could be the same target if we are in
# $(LIB_COMPONENT_SRC_DIR). But it seems to work out anyway.
#
build : $(LIB_COMPONENT_SRC_DIR)build 

################################################################################
#      Include_lines/file_list and Include_lines/file_list.new
#
# These targets track creating, deleting, and renaming of source code files. 
#
# We explicitly hide the link between the dependencies of
# Include_lines/file_list.new and Include_lines/file_list so that we can
# implement responding to changes only when they matter to save time. For
# example, the directory timestamp does tell us that we may need to rebuild, but
# almost always we do not need to. Hence we ensure we get this right efficienty
# by using multiple calls in the script build-2.
#
# ---------------------------------------------
# Include_lines/file_list 
#
# This target is built in two ways depending on whether it needs to be created
# or whether it is being updated. If it does not exist, it can be created by its
# own rule during the reading of the Makefile. Whether this actually happens
# depends on the make flavor.  Note that we do not provide dependencies for this
# target so that it won't be updated by this "creation" rule unless it does not
# exist. If it exists, it is updated as a side effect of building the target
# Include_lines/file_list.new. This process will also reate the file if
# needed. 
#
# We used to make file_list depend on tools, but using file_list.new
# accomplishes what is needed better because file_list is not necessarily
# updated by its build, hence the commented out IVI_TOUCH.
#
# Include_lines/file_list : \
#     $(MAKE_SCRIPT_PATH)build_file_list

# Because the target is not guaranteed to be updated, but has dependencies on
# tools, we could get out of date in this case. Hence we rely on build_file_list
# to check the tools when they could have an effect. 
#
# Since we hide dependencies, we need to track that this has been executed for
# ivi_lock_for_make, which we do via $@.made 
#
# Because the target does not depend on anything, we will only execute the rule
# if it does not exist, in which case build_include_lines will create it. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list :
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 50 made $(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
# 	$(ECHO_MAKE_CMD)$(IVI_TOUCH) $@.made
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# ---------------------------------------------
# Include_lines/file_list.new

# This file tracks the current state of the list of files, so that it can be
# compared with the copy in Include_lines/file_list, without updating its time
# stamp, which should happen only if there is a difference. We basically use
# Include_lines/file_list.new as a proxy for Include_lines/file_list so that we
# can hide the dependency on the directory time stamp to reduce save build time. 

# Dependency on tools that build the target, including hidden ones. We do not
# make the hidden ones depend on the non-hidden ones as we do not know how to
# build any of them.  
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new: $(IVI_BUILD_TOOLS)

# Rule to build Include_lines/file_list.new. Note that there is no need to
# depend on the directory Include_lines because if that does not exist, the
# target does not either, and the script build_file_list will create
# Include_lines. 
# 
# Because we depend on the directory we can be out of date due to vim swap
# files, backup processes, IO redirection to capture build output, etc. So do
# not be surprised if we need multiple builds for the rule not to trigger.
# However, this is designed as a lightweight update, so it should not matter. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new : $(LIB_COMPONENT_REAL_SRC_DIR) $(FORCE_WITH_SUN5)
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 50 $@ $(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# Convenience dummy target used by the script build-2. Using the target directly
# would require extra logic for the leading directory, especially in the case
# where we always use full paths for library components, even if we are building
# in that directory. The dummy target file_list.new should not be used as a
# dependency.
#
.PHONY : file_list.new
file_list.new : \
    $(LIB_COMPONENT_SRC_DIR)build \
    $(LIB_COMPONENT_SRC_DIR)Makefile \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new

################################################################################
#      Include_lines/include_lines and Include_lines/include_lines.new
#
# Include_lines/include_lines tracks the state of include lines in source files
# which determine whether Makefile-depend is up to date. We represents the state
# in shadow files, two per source code file, in Include_lines. Using files for
# each source file is necessary, as Makefile-depend depends on which file has
# which includes. If any source file has changed in way that matters, then
# Include_lines/include_lines is updated as a side effect of building the
# exposed target Include_lines/include_lines.new. 
#
# As with file_list/file_list.new, we hide the link between the dependencies of
# Include_lines/file_list.new and Include_lines/file_list so that we can
# implement responding to changes only when they matter to save time. 
#
# ---------------------------------------------
# Include_lines/include_lines 
#
# This target is built in two ways depending on whether it needs to be created or
# whether it is being updated. If it does not exist, it can be created by its own
# rule. Whether this actually happens depends on the make flavor.  Note that we
# do not provide dependencies in that target so that it won't be updated by this
# rule unless it does not exist. If it exists, it is updated as a side effect of
# building the target Include_lines/file_list.new. This process will also able
# to create the file if needed. 
#
# Because the target does not depend on anything, we will only execute the rule
# if it does not exist, in which case build_include_lines will create it. 
#
# There are additional dependencies for sub_libs_needed in Makefile-dirs. 
# The script build_include_lines updates Include_lines/sub_libs_needed only if
# needed or if one of the arguments is '-f'. But '-f' is recursive, so we do not
# want to use it if we do not have to. So, we touch the target. 

$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines : 
# $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines : $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
# 	@$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 900 $@ $(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)
	$(ECHO_MAKE_CMD)$(IVI_TOUCH) $@
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# ---------------------------------------------
# Include_lines/include_lines.new 

# These rules need comments.
#
# It is possible this may hardly ever get used, now that we call
# build_include_lines_2 from build_file_list_2 if things look different. 
#
$(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/new/% : $(LIB_COMPONENT_REAL_SRC_DIR)% $(MAKE_SCRIPT_PATH)update_include_line_file
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
#	@$(MAKE_SCRIPT_PATH)update_include_line_file '$(LIB_COMPONENT_REAL_SRC_DIR)' $*
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 120 $@ $(MAKE_SCRIPT_PATH)update_include_line_file '$(LIB_COMPONENT_REAL_SRC_DIR)' $*
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

$(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines : $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/file_list 
	$(IVI_MKDIR) $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines
	$(MAKE_SCRIPT_PATH)stream_file_names -s -h -skip_incl -no_path $(LIB_COMPONENT_SRC_DIR) | sed 's/\(.*\)/$$(LIB_COMPONENT_SRC_DIR)Include_lines\/include_lines.new : $$(LIB_COMPONENT_SRC_DIR)Include_lines\/new\/\1/' > $@

include $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines

# Dependency on tools that build the target, including hidden ones. We do not
# make the hidden ones depend on the non-hidden ones as we do not know how to
# build any of them.
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(IVI_BUILD_TOOLS)

# $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_NEW_INCLUDE_LINE_FILES)
# $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list 

# It is not clear if we still need include_lines.new

$(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new : $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_REAL_SRC_DIR)Include_lines/Makefile-include-lines 
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 900 $@ $(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)
#	@$(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# Convenience dummy target used by the script build-2. Using the target directly
# would require extra logic for the leading directory, especially in the case
# where we always use full paths for library components, even if we are building
# in that directory. The dummy target include_lines.new should not be used as a
# dependency.
#
.PHONY : include_lines.new
include_lines.new : \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new \
    $(LIB_COMPONENT_SRC_DIR)build \
    $(LIB_COMPONENT_SRC_DIR)Makefile \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR)

################################################################################
#      Include_lines/sub_libs_needed (target with hidden dependencies) 
#
# Build Include_lines/sub_libs_needed which builds Makefile-dirs as a side
# effect.  We cannot expose the dependency of Makefile-dirs on
# Include_lines/sub_libs_needed because then (for some versions of "make") the
# include Makefile-dirs would force building of Include_lines/sub_libs_needed
# which we are not necessarily ready to do as it depends on Makefile-dirs
# itself. 
#
# For library directories, the file Makefile-dirs is included from Makefile-2,
# which has a rule to build it in case it does not exist. This "bootstrapping"
# build does not need Include_lines/sub_libs_needed to succeed. However, the
# result will need to be updated when Include_lines/sub_libs_needed becomes
# available as this is used to build the real meat of Makefile-dirs.  

$(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed : $(IVI_BUILD_TOOLS)

# Because the target is not guaranteed to be updated, we need to track that this
# has been executed for ivi_lock_for_make, which we do via $@.made 
#
# There are additional dependencies for sub_libs_needed in Makefile-dirs. 
# The script build_include_lines updates Include_lines/sub_libs_needed only if
# needed or if one of the arguments is '-f'. But '-f' is recursive, so we do not
# want to use it if we do not have to. So, we touch the target. 

$(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed : $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)build_file_list $(LIB_COMPONENT_SRC_DIR)
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 900 $@ $(MAKE_SCRIPT_PATH)build_include_lines $(LIB_COMPONENT_SRC_DIR)
	$(ECHO_MAKE_CMD)$(IVI_TOUCH) $@
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# Convenient dummy target that provides a synonym for
# Include_lines/sub_libs_needed.
#
.PHONY : sub_libs_needed
sub_libs_needed : $(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed

################################################################################
#            Build and include Makefile-depend


# Makefile-depend depends on the file that builds it (this file), which leads to
# bootstrapping difficulties (although I cannot remember exactly what they are).
# Instead we depend on a file which tracks the state of this file, and which can
# be made trivially.  
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state : 
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines
	$(IVI_TOUCH_1990) $@

################################################################################

# $(LIB_COMPONENT_SRC_DIR)Include_lines/header_file_list : 
# 	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines
# 	$(IVI_RM) $@.new
# 	$(IVI_TOUCH) $@

$(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h : $(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list 
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 30 $@ $(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

# Kobus: 20/07/22. Double fine. I am commenting out all references to
# Makefile-depend-incl-dot-h in this file and in build_incl_dot_h. 

# Kobus: 19/01/02. Fine, but do we really need # Include_lines/Makefile-depend-incl-dot-h?
#
# The file is Include_lines/Makefile-depend-incl-dot-h is built by
# build_incl_dot_h only if *_incl.h does not exist. So we need to remove it
# before calling build_incl_dot_h.
#
# $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h : $(LIB_COMPONENT_SRC_DIR)Include_lines/header_file_list 
# 	$(ECHO_MAKE_CMD)$(IVI_RM) $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h
# 	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 5 $@ $(MAKE_SCRIPT_PATH)build_incl_dot_h $(LIB_COMPONENT_SRC_DIR)

# include $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h

################################################################################

# The symbol VIM_SUFFIX used below is either "ex" or "ex7".

$(MAKE_EDIT_PATH)%.ex: $(MAKE_EDIT_PATH)strip_ex_files

$(MAKE_EDIT_PATH)%.ex: $(MAKE_EDIT_PATH)%.vim
	$(MAKE_EDIT_PATH)strip_ex_files $< $@

$(MAKE_EDIT_PATH)%.ex7: $(MAKE_EDIT_PATH)strip_ex7_files 

$(MAKE_EDIT_PATH)%.ex7: $(MAKE_EDIT_PATH)%.vim
	$(MAKE_EDIT_PATH)strip_ex7_files $< $@

#  This list should have all the edit scripts used in
#  build_program_library_depend.

$(LIB_COMPONENT_SRC_DIR)Makefile-depend : \
    $(MAKE_EDIT_PATH)Dirs.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Obs_depend.$(VIM_SUFFIX) \
    $(MAKE_EDIT_PATH)Obs.$(VIM_SUFFIX) \

$(LIB_COMPONENT_SRC_DIR)Makefile-depend : $(IVI_BUILD_TOOLS) 

$(LIB_COMPONENT_SRC_DIR)Makefile-depend : \
    $(MAKE_PATH)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) 

# -------------------------------------------------
# Rule for Makefile-depend
#
# This needs to become a script to get locking behaviour correct. 

# Quite a bit of cleanup is possible here by extending ivi_makedepend to handle
# the header files, etc., or a similar strategy. This will be rewritten
# completely at some point. To debug what follows, first note that setting
# IVI_DEBUG will tell ivi_makedepend to write some intermediate files with
# "SAVE" in the name. Second, the lines below containing "SAVE" can be
# uncommented to create addtional intermediate files. 
#
$(LIB_COMPONENT_SRC_DIR)Makefile-depend : $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
# $(LIB_COMPONENT_SRC_DIR)Makefile-depend : $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
	@$(ECHO_IF_VERBOSE)  " "
	@$(ECHO_IF_VERBOSE)  "====================================================================================="
	@$(ECHO_IF_VERBOSE)  "    Make is building $(LIB_COMPONENT_SRC_DIR)Makefile-depend because of $?" 
	@$(ECHO_IF_VERBOSE)  " " 
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 900 $@ $(MAKE_SCRIPT_PATH)build_library_makefile_depend $(LIB_COMPONENT_PREFIX) LIB_COMPONENT $(LIB_COMPONENT_REAL_SRC_DIR)
	@$(ECHO_IF_VERBOSE)  " "
	@$(ECHO_IF_VERBOSE)  "    $(LIB_COMPONENT_SRC_DIR)Makefile-depend is built" 
	@$(ECHO_IF_VERBOSE)  "====================================================================================="
	@$(ECHO_IF_VERBOSE)  " "
   
include $(LIB_COMPONENT_SRC_DIR)Makefile-depend

################################################################################

#
# Build and include Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX)
#

# This is needed for Makefile-depend. By making things depend on this file which
# is updated only when
# Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) is
# changed, we reduce compiling. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed-state$(VAR_CACHE_SUFFIX) : 
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed
	$(IVI_TOUCH_1990) $@

# Dependencies on the tools needed to build it. 
#
$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) : $(MAKE_PATH)init_compile $(IVI_BUILD_TOOLS)

$(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) : $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines
	@$(ECHO_IF_VERBOSE) " "
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
# 	$(MAKE_SCRIPT_PATH)build_makefile_libs_needed '$(LIB_COMPONENT_SRC_DIR)'
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)ivi_lock_for_make 60 $@ $(MAKE_SCRIPT_PATH)build_makefile_libs_needed '$(LIB_COMPONENT_SRC_DIR)'
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)copy_if_different $@ $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed-state$(VAR_CACHE_SUFFIX)
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) " "

include $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX)
	
################################################################################
#                         Depend  
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#
# Kobus: 19/01/02. But we do not have the dependancy on Makefile-library! 
#
depend_$(LIB_COMPONENT_PREFIX) : \
    $(DEPEND_TARGETS) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-library.state \
    $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/file_list.new \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/include_lines.new \
#    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-depend-incl-dot-h \
    $(LIB_COMPONENT_SRC_DIR)Makefile-depend

################################################################################
#                       Object directory 

# Important only to setup parallel make. 
dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)c_dir_made 

# Important only to setup parallel make. 
dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)cxx_dir_made 


# We use "c_dir_made" in the following because $(OBJ_DIR) may be a symbolic link.
$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)c_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_OBJ_DIR)" "$(OBJ_DIR)" . "$(LIB_COMPONENT_SRC_DIR)"
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)
	$(IVI_TOUCH) $@

# We use "cxx_dir_made" in the following because $(CXX_OBJ_DIR) may be a symbolic link.
$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)cxx_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_OBJ_DIR)" "$(CXX_OBJ_DIR)" . "$(LIB_COMPONENT_SRC_DIR)"
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)
	$(IVI_TOUCH) $@

# #########################$(LIB_COMPONENT_SRC_DIR)#######################################################
# #                      Library archive from the objects 
# 
# #
# # Currently we do not use sub-archives. But they are convenient as time stamped
# # intermediate targets. 
# #
# # Normally we do a "make depend" before "make" via the script build-2.  However,
# # for completeness, we include the relevant dependencies from depend_XXX to
# # ensures that even if this target is explicitly made by some other process, then
# # it will be rebuilt if  they are out of date, and everything would be built
# # with multiple "makes" regardless of the version of make.
# # 
# # Note that we cannot simply use the target depend_XXX, as it is not a real
# # target, without relying on the particular version of make. Hence we have to
# # copy the dependencies. 
# # 
# $(LIB_COMPONENT_ARCHIVE) : $(LIB_COMPONENT_SRC_DIR)Makefile-library $(LIB_COMPONENT_SRC_DIR)Makefile-library.$(MAKE_FLAVOR) $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) $(LIB_COMPONENT_SRC_DIR)Makefile-depend $(LIB_COMPONENT_SRC_DIR)$(LD_OBJ_DIR)ld_dir_made $(LIB_COMPONENT_OBS) 
# 	$(IVI_RM) $@
# 	$(IVI_AR) $@ $(LIB_COMPONENT_OBS)
# 	$(IVI_RANLIB) $@ \
# 	    $(NULL_TO_MAKE_BLANK_LINE)
# 

################################################################################
#                            GNU precompiled headers

$(LIB_COMPONENT_PARENT_DIR)$(PCH_DIR)$(LIB_COMPONENT_PREFIX)$(IVI_DIR_STR)%.h.gch : $(LIB_COMPONENT_SRC_DIR)%.h 
	$(IVI_MKDIR) $(LIB_COMPONENT_PARENT_DIR)$(PCH_DIR)$(LIB_COMPONENT_PREFIX)
	( $(IVI_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#                       Make the object files 
#
# Default build (may be overridden in program specific makefiles). 

# The dependency Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) 
# is built from source files, so, if the source file changes, then the object
# file is also out of date, and so it appears that the dependency is not really
# needed. However, since it is included, the previous version could be active,
# and then we would forget that the targets are out of date. This is mitigated
# by the sequence enforced in the script build-2, but we make explicit the need
# there also, in case this makefile gets used without the script. 

# Note:
#    We used to handle dependencies on the object dirs and other items here, but
#    this is not robust, especially for mixed C/C++. Now we handle this in
#    Makefile-depend. 

$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.c 
	@$(IVI_ECHO)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_CC)  --version |& $(IVI_HEAD) -1 $(SUPPRESS_IF_QUIET) 
	( $(IVI_CC) $< -c -o $@ \
        $(LIB_COMPONENT_CC_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_CC_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CC_FLAGS) \
        $(LIB_COMPONENT_CC_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) ; \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cpp 
	@$(IVI_ECHO)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_CXX)  --version |& $(IVI_HEAD) -1 $(SUPPRESS_IF_QUIET)
	( $(IVI_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cxx
	@$(IVI_ECHO)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_CXX)  --version |& $(IVI_HEAD) -1 $(SUPPRESS_IF_QUIET)
	( $(IVI_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.C
	@$(IVI_ECHO)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_CXX)  --version |& $(IVI_HEAD) -1 $(SUPPRESS_IF_QUIET)
	( $(IVI_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cc
	@$(IVI_ECHO)
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_CXX)  --version |& $(IVI_HEAD) -1  $(SUPPRESS_IF_QUIET)
	( $(IVI_CXX) $< -c -o $@ \
        $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE); \
        set compile_status = $${status}; $(IVI_ECHO) $(COMPILE_STATUS_STR)  [ for $@  ] $(SUPPRESS_IF_QUIET); exit $${compile_status} ) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#              Make local versions of library object files for programs
#
# We control the input to "ar" when making program specfic versions of libraries
# by copying the object modules. This handles the problem that input to "ar" can
# be too long as a function of how deep in the directory tree the code is which
# is brittle. This also begins to set up infrastructure for more clever use of
# "ar", which we are holding off on until the next rewrite which will include
# multiple libraries. 
#

$(OBJ_DIR)$(LIB_COMPONENT_PREFIX)/%.o : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(OBJ_DIR)$(LIB_COMPONENT_PREFIX)
	$(IVI_CP) $< $@ 

$(CXX_OBJ_DIR)$(LIB_COMPONENT_PREFIX)/%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(CXX_OBJ_DIR)$(LIB_COMPONENT_PREFIX)
	$(IVI_CP) $< $@ 

################################################################################
#                       Make sharable object files 
#
# To avoid repeating dependencies in Makefile-depend for shared, we make the
# shared versions depend on the non-shared (standard, static) objects. Hence
# building shared will also build the standard objects. This is OK as we usually
# build shared after standard anyway. 
#
$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.c 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(OBJ_DIR)$(SHARED_DIR)
	$(IVI_CC) $< -c -o $@ \
        $(CC_SHARED_FLAGS) $(LIB_COMPONENT_CC_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_CC_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CC_FLAGS) \
        $(LIB_COMPONENT_CC_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o 

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cpp 
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(IVI_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_CXX_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE)\
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o 

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cxx
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(IVI_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)


# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.C
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(IVI_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

# Kobus. Seems redundant. Comment out and see what breaks. 
# $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)%.o

$(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)%.o : $(LIB_COMPONENT_SRC_DIR)%.cc
	@$(ECHO_IF_VERBOSE) "Building $@ because of $?" 
	@$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(CXX_OBJ_DIR)$(SHARED_DIR)
	$(IVI_CXX) $< -c -o $@ \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(LIB_COMPONENT_WARNING_FLAGS) \
        $(PROGRAMMER_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        |& $(IVI_CXX_MESSAGE_FILTER) \
        $(NULL_TO_MAKE_BLANK_LINE)

################################################################################
#                    All
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#
all_$(LIB_COMPONENT_PREFIX) : \
    depend_$(LIB_COMPONENT_PREFIX) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) \
    $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h \
    $(LIB_COMPONENT_OBS) 

################################################################################
#                    Shared
#
# We include the dependency on Makefile-library (this file) because not all
# makes will rebuild Makefile-library simply because it included. 
#

# Note yet used. Currently we only build shared via src/IVI and src/IVI_cpp. 
shared_$(LIB_COMPONENT_PREFIX) : \
    depend_$(LIB_COMPONENT_PREFIX) \
    $(LIB_COMPONENT_SRC_DIR)Include_lines/Makefile-libs-needed/Makefile-libs-needed$(VAR_CACHE_SUFFIX) \
    $(LIB_COMPONENT_SRC_DIR)$(LIB_COMPONENT_PREFIX)_incl.h \
    $(LIB_COMPONENT_SHARED_OBS) 

################################################################################
#                       Tags
# 

tags : $(LIB_COMPONENT_SRC_DIR)tags

$(LIB_COMPONENT_SRC_DIR)tags : $(IVI_BUILD_TOOLS) $(LIB_COMPONENT_SRC_DIR)Makefile-library $(LIB_COMPONENT_SRC_DIR)Include_lines/sub_libs_needed $(LIB_COMPONENT_SRC_DIR)Include_lines/header_tag_files $(LIB_COMPONENT_FILES)
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(MAKE_SCRIPT_PATH)do_ctags '$(LIB_COMPONENT_REAL_SRC_DIR)'
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="

$(LIB_COMPONENT_SRC_DIR)Include_lines/header_tag_files : $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/include_headers.cpp $(LIB_COMPONENT_TAG_FILES) 
	@$(ECHO_IF_VERBOSE) "====================================================================================="
	@$(ECHO_IF_VERBOSE) "    Make is building $@ because of $?" 
	$(IVI_CAT) $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/* | $(IVI_SORT) -u > $@
	@$(ECHO_IF_VERBOSE) "    Make is done building $@ " 
	@$(ECHO_IF_VERBOSE) "====================================================================================="

$(LIB_COMPONENT_SRC_DIR)Include_lines/include_headers.cpp : ${LIB_COMPONENT_HEADER_FILES}
	$(ECHO_MAKE_CMD)$(MAKE_SCRIPT_PATH)stream_file_names -h $(LIB_COMPONENT_SRC_DIR) | $(IVI_SED) 's/\(.*\)/#include "\1"/' > $@

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/include_headers.cpp : $(LIB_COMPONENT_SRC_DIR)Include_lines/include_headers.cpp
	$(ECHO_MAKE_CMD)$(IVI_CXX) $< -M \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)

# The dummy_empty_file is a cheesy hack so that we can safely cat all files in the directory.
$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists : 
	$(IVI_MKDIR) $@
	$(IVI_TOUCH) $@/dummy_empty_file

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.c : $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.c : $(LIB_COMPONENT_SRC_DIR)%.c 
	$(ECHO_MAKE_CMD)$(IVI_CC) $< -M \
        $(CC_SHARED_FLAGS) $(LIB_COMPONENT_CC_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_CC_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CC_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cxx : $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cxx : $(LIB_COMPONENT_SRC_DIR)%.cxx 
	$(ECHO_MAKE_CMD)$(IVI_CXX) $< -M \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cpp : $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cpp : $(LIB_COMPONENT_SRC_DIR)%.cpp 
	$(ECHO_MAKE_CMD)$(IVI_CXX) $< -M \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cc : $(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.cc : $(LIB_COMPONENT_SRC_DIR)%.cc 
	$(ECHO_MAKE_CMD)$(IVI_CXX) $< -M \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.C : Include_lines/tag_file_lists

$(LIB_COMPONENT_SRC_DIR)Include_lines/tag_file_lists/%.C : $(LIB_COMPONENT_SRC_DIR)%.C 
	$(ECHO_MAKE_CMD)$(IVI_CXX) $< -M \
        $(CXX_SHARED_FLAGS) $(LIB_COMPONENT_CXX_FLAGS) $(LIB_COMPONENT_EXTRA_COMPILE_FLAGS) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS) $(HACK_CXX_FLAGS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(HACK_AFTER_INCLUDES) $(AFTER_INCLUDES) \
        $(LIB_COMPONENT_NEED_HAVE) \
        $(WITH_LIBS_HAVE) \
        | $(IVI_SED) '/:/d' | $(IVI_SED) 's/^ *//' | $(IVI_SED) 's/ \\//' | $(IVI_TR) ' ' '\n'| $(IVI_SORT) -u > $@ \
        $(NULL_TO_MAKE_BLANK_LINE)


# ################################################################################
#                           Man pages
#
# 
# Note that it is impractical to make the dependencies on what we are building
# (man pages), as they are created from the source file routines. Hence we use
# the proxies $(MAKE_DOC_DIR)*.made. 
#

# A target for making sure that directories exist. This is only used for
# parallel makes, but most machines now have more than one core, so this is
# becoming the common case. The target doc_dir_made_xxx is never made, so it is
# always out of date. 
#
doc_dir_made_$(LIB_COMPONENT_PREFIX) : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made 

#
# We use the target up_to_date because the documentation files are typically
# sets of unknown man page files that arise from each source file. Hence we
# cannot check time stamps against what we are actually building. However, I am
# not sure that this is in fact the best way to handle this. 
#
doc_$(LIB_COMPONENT_PREFIX) : depend_$(LIB_COMPONENT_PREFIX) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)up_to_date 

#
# We use "doc_dir_made" because the MAKE_OBJ_DIR itself may be a symbolic link.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made :
	$(MAKE_SCRIPT_PATH)make_src_shadow_dir "$(REAL_MAKE_DOC_DIR)" "$(MAKE_DOC)" "." "$(LIB_COMPONENT_SRC_DIR)"
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)
	$(IVI_TOUCH) $@

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)up_to_date: $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_DOC_FILES)
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)
	$(IVI_TOUCH) $@
 

# Comment on the following comment---I am not sure this guarantees anything. We
# either should build this serially, or arrange the parallel build in build-2. 
#
#     Ensure the object directory gets made first, even with parallel makes.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.c.made : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made 

################################################################################
#                             c2Man 

COMPILE_INFO = \
  -C"$(MD_DEFINES) $(LIB_COMPONENT_EXTRA_LIB_OPTIONS)" \
  -C" -I/usr/local/include/IVI" \
  -C"$(MAN_PAGE_LOAD_DIRS)" \
  -C"-lIVI $(LIBS)" 


# Getting the very old c2man program to document code that uses changing and
# possibly buggy system header files takes a lot of trickery. There is probably
# too much trickery, but redoing it differently (using doxygen?) would be a lot
# of work.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.c.made : $(LIB_COMPONENT_SRC_DIR)Makefile-library $(MAKE_BIN_PATH)c2man $(MAKE_BIN_PATH)include_def $(MAKE_BIN_PATH)c2man_in

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)%.c.made : $(LIB_COMPONENT_SRC_DIR)%.c
	$(MAKE_SCRIPT_PATH)assert_non_null_arg $(MAKE_DOC_DIR) 
	$(IVI_SED) < $(LIB_COMPONENT_SRC_DIR)$*.c '/Hide from c2man/d' | $(IVI_SED) 's/^.* End of includes for c2man .*/static int make_doc_cut = 0;/' >  $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.c
	$(MAKE_BIN_PATH)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.c | $(MAKE_BIN_PATH)c2man_in -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp.c
	$(C2MAN_CPP_CMD) -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split.c
	$(MAKE_SCRIPT_PATH)ivi_cat_before "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one.c 
	$(C2MAN_CPP_CMD_2)  -D$(UC_MACHINE) -D$(UC_OS) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man.h
	$(IVI_ECHO) '#include "$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man.h"' > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man.c
	$(MAKE_SCRIPT_PATH)ivi_cat_after -a "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split.c | $(IVI_SED) '/^#/d' >> $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man.c
	$(IVI_MKDIR) $(MAN3_MAN_PATH)
	$(MAKE_BIN_PATH)c2man \
         $(C2MAN_FLAGS) \
         $(COMPILE_INFO) \
         $(LIB_COMPONENT_NEED_HAVE) \
         $(BASE_INCLUDES) \
         -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
         -o$(MAN3_MAN_PATH) \
         $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man.c
# 	$(IVI_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_in
#
# HTML
# 
	$(MAKE_BIN_PATH)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.c | $(MAKE_BIN_PATH)c2man_in -h -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_html.c
	$(C2MAN_CPP_CMD) -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_html.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html.c
	$(MAKE_SCRIPT_PATH)ivi_cat_before "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_html.h
	$(C2MAN_CPP_CMD_2)  -D$(UC_MACHINE) -D$(UC_OS) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_html.h > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_html.h
	$(IVI_ECHO) '#include "$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_html.h"' > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_html.c
	$(MAKE_SCRIPT_PATH)ivi_cat_after -a "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html.c | $(IVI_SED) '/^#/d'  >> $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_html.c
	$(IVI_MKDIR) $(HTML_MAN_PATH)
	$(MAKE_BIN_PATH)c2man -Th \
         -Th $(C2MAN_FLAGS) \
         $(COMPILE_INFO) \
         $(LIB_COMPONENT_NEED_HAVE) \
         $(BASE_INCLUDES) \
         -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
         -o$(HTML_MAN_PATH) \
         $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_html.c
# 	$(IVI_MV) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.c.c2man_in_html
	$(IVI_TOUCH) $@

# Header file documentation. We coerce c2man to documenting header files
# properly through a variety of tricks. There is probably too much trickery, but
# redoing it differently (using doxygen?) would be a lot of work.
#
$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)*.h.made : $(MAKE_BIN_PATH)c2man $(MAKE_BIN_PATH)include_def  $(MAKE_BIN_PATH)c2man_in	$(MAKE_SCRIPT_PATH)fix_header_man_pages $(MAKE_SCRIPT_PATH)fix_header_html_pages

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)%.h.made : $(LIB_COMPONENT_SRC_DIR)%.h  
	$(MAKE_SCRIPT_PATH)assert_non_null_arg $(MAKE_DOC_DIR) 
	$(IVI_SED) < $(LIB_COMPONENT_SRC_DIR)$*.h '/Hide from c2man/d' | $(IVI_SED) 's/^.* End of includes for c2man .*/static int make_doc_cut = 0;/' >  $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.h
	$(MAKE_BIN_PATH)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.h | $(MAKE_BIN_PATH)c2man_in -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_HEADER.c
	$(C2MAN_CPP_CMD) -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_HEADER.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_HEADER.c
	$(MAKE_SCRIPT_PATH)ivi_cat_before "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_HEADER.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_HEADER.h
	$(C2MAN_CPP_CMD_2)  -D$(UC_MACHINE) -D$(UC_OS) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_HEADER.h > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_HEADER.h
	$(IVI_ECHO) '#include "$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_HEADER.h"' > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_HEADER.c
	$(MAKE_SCRIPT_PATH)ivi_cat_after -a "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_HEADER.c | $(IVI_SED) '/^#/d' >> $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_HEADER.c
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(MAKE_BIN_PATH)c2man \
        $(C2MAN_FLAGS) \
        $(COMPILE_INFO) \
        $(LIB_COMPONENT_NEED_HAVE) \
        -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
        -o$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_HEADER.c
	$(MAKE_SCRIPT_PATH)fix_header_man_pages $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
#
# HTML
# 
	$(MAKE_BIN_PATH)include_def __C2MAN__ < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_c2man_in.h | $(MAKE_BIN_PATH)c2man_in -h -i $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h.index > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_html_HEADER.c
	$(C2MAN_CPP_CMD) -D$(UC_MACHINE) -D$(UC_OS) \
        $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES) \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_pp_html_HEADER.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html_HEADER.c
	$(MAKE_SCRIPT_PATH)ivi_cat_before "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html_HEADER.c > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_html_HEADER.h
	$(C2MAN_CPP_CMD_2)  -D$(UC_MACHINE) -D$(UC_OS) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_part_one_html_HEADER.h > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_html_HEADER.h
	$(IVI_ECHO) '#include "$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_html_HEADER.h"' > $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_html_HEADER.c
	$(MAKE_SCRIPT_PATH)ivi_cat_after -a "make_doc_cut" < $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_split_html_HEADER.c | $(IVI_SED) '/^#/d' >> $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_html_HEADER.c
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(MAKE_BIN_PATH)c2man -Th \
        $(C2MAN_FLAGS) \
        $(COMPILE_INFO) \
        $(LIB_COMPONENT_NEED_HAVE) \
        -i\"$(LIB_COMPONENT_PREFIX)/$*.h\" \
        -o$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h \
        $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*_html_HEADER.c
	$(MAKE_SCRIPT_PATH)fix_header_html_pages $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)$*.h
	$(IVI_TOUCH) $@

################################################################################
#                             doxygen 

# Doxygen really wants to make everything together. So we do the make in
# IVI_cpp. The library makefile establishes which files suggest that doxygen is
# out of date. 

$(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doxygen_up_to_date : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doc_dir_made $(LIB_COMPONENT_DOXYGEN_FILES)
	$(IVI_MKDIR) $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)
	$(IVI_TOUCH) $@
 
# Note the master target is in IVI_cpp. Here we inform it about dependencies in
# this directory.
# 
$(IVI_SRC_PATH)IVI_cpp/$(MAKE_DOC_DIR)doxygen_up_to_date : $(LIB_COMPONENT_SRC_DIR)$(MAKE_DOC_DIR)doxygen_up_to_date

# If the user does a make doc in a c++ library directory, then that get
# translated into "make doxygen" by the build scripts, which leads us to this
# target, which magically builds doxygen in IVI_CPP. This should be improved if
# possible. FIXME
#
doxygen_$(LIB_COMPONENT_PREFIX) : 
	@$(ECHO_UNLESS_QUIET) "Building doxygen in $(IVI_SRC_PATH)IVI_cpp."
	cd $(IVI_SRC_PATH)IVI_cpp; make doxygen

misc_doc_$(LIB_COMPONENT_PREFIX) : doc_$(LIB_COMPONENT_PREFIX) doxygen_$(LIB_COMPONENT_PREFIX) 
	rsync -rl -u $(IVI_DOC_PATH)doxygen/ $(MISC_DOC_PATH)doxygen 
	rsync -rl -u $(IVI_DOC_PATH)man/ $(MISC_DOC_PATH)man 

################################################################################
#                               Clean
#
clean_$(LIB_COMPONENT_PREFIX) : $(CLEAN_TARGETS) 
	$(MAKE_SCRIPT_PATH)clean_build '$(LIB_COMPONENT_SRC_DIR)' $(OBJ_DIR) $(CXX_OBJ_DIR) $(LD_OBJ_DIR) '$(LIB_COMPONENT_PARENT_DIR)_PCH$(IVI_DIR_STR)$(CXX_OBJ_DIR)$(IVI_DIR_STR)$(LIB_COMPONENT_UP_PREFIX)' $(MAKE_DOC_DIR) 
	
################################################################################
#                   Protoize
#
# We have not used this in quite some time. It is probably broken. 
#
proto_$(LIB_COMPONENT_PREFIX) : 
	protoize -c "-DPROTOIZE $(CC_FLAGS) $(HACK_CC_FLAGS) $(IVI_HAVE) $(HACK_BEFORE_INCLUDES) $(BEFORE_INCLUDES) $(BASE_INCLUDES) $(DEFAULT_OPT_INCLUDES) $(LIB_COMPONENT_EXTRA_LIB_INCLUDES) $(GENERIC_AFT_INCLUDES)" *.c
	$(MAKE_SCRIPT_PATH)fix_protoize *.c

################################################################################
#        Extra lines automatically generated for each sub lib
#
 
