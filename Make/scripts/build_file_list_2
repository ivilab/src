#!/bin/tcsh -f

###############################################################################
#
# Identification:
#     A script to maintain the file Include_lines/file_list
#
# Description:
#     Script called by make to maintain the Include_lines/file_list. This tracks
#     changes to the collection of source files. If source files are added,
#     deleted, or renamed, then the file Include_lines/file_list gets updated
#     which leads to a rebuild of the makefiles on the next call to make.
#
#     The reason why we need an additional call to make is that this script gets
#     called whenever the directory gets updated which happens relatively
#     frequently due to a number of reasons. However, this only indicates that
#     the source file collection might have changed, and, in fact, source file
#     collection changes are relatively rare. Thus there are many false alarms
#     which we can prune relatively quickly. But having the trigger (directory
#     timestamp) be a dependency in make will mean that we rebuild the makefiles
#     every time which is relatively expensive. Hence we use the "hidden"
#     dependency Include_lines/file_list. The script build-2, which is called by
#     Makefile, manages this by calling make several times. If build-2 is not
#     used (e.g., "make -f Makefile-2) then it may take multiple makes before
#     everything is up to date. Build-2 uses multiple calls to avoid this
#     confusion. 
#
# Author:
#     Kobus Barnard
#
###############################################################################

set num_args = $#argv

set exit_status = 0

if ($?VERBOSE_INDENT) then
    setenv VERBOSE_INDENT "    ${VERBOSE_INDENT}"
else 
    setenv VERBOSE_INDENT ""
endif 

# We need a consistent sort across machines.
setenv LC_ALL "en_US.UTF-8"
setenv LC_CTYPE "en_US.UTF-8"
   
set dir_arg = "$1"

if ("${dir_arg}" != "") then
    pushd ${dir_arg} > /dev/null
endif 

${VERBOSE_ECHO} "${VERBOSE_INDENT}Entering script build_file_list_2 in directory $cwd. "

# If we are in a library directory, build the _incl.h file first, because, as a
# header file, it will cause building of Makefiles a second time if we create
# it too late in the process.

if (-e "Makefile-include") then
    set have_incl_dot_h = `${IVI_LS} | ${IVI_GREP} -c '_incl.h$'`
    if (! ${have_incl_dot_h}) then
        # Last path component.
        set dir_str = `echo ${cwd} | sed 's#.*/##'`
        set target = "${cwd}/${dir_str}_incl.h"

        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 (in $cwd) executing: ${MAKE_SCRIPT_PATH}ivi_lock_for_make 60 ${target} ${MAKE_SCRIPT_PATH}build_incl_dot_h"

        ${MAKE_SCRIPT_PATH}ivi_lock_for_make 60 ${target} ${MAKE_SCRIPT_PATH}build_incl_dot_h 
        if (${status}) then
            ${P_STDERR} "Call to build_incl_dot_h failed in script build_file_list_2 in ${cwd}."
            set exit_status = 1
            goto end_of_script
        endif 
    endif 
endif 

set must_update = 0

if (-e Include_lines) then
    if (! -d Include_lines) then
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new as Include_lines was not a directory." 
        ${IVI_RM} Include_lines
        ${IVI_MKDIR} Include_lines
        set must_update = 1
    endif 
else 
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new as Include_lines did not exist." 
    ${IVI_MKDIR} Include_lines
    set must_update = 1
endif 

if (-e Include_lines/new) then
    if (! -d Include_lines/new) then
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new as Include_lines/new was not a directory." 
        ${IVI_RM} Include_lines/new
        ${IVI_MKDIR} Include_lines/new
        set must_update = 1
    endif 
else 
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new as Include_lines/new did not exist." 
    ${IVI_MKDIR} Include_lines/new
    set must_update = 1
endif 

if (! ${must_update}) then
    # Do yet some more checking.

    if (! -e Include_lines/file_list.new) then 
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because it does not exist." 
        set must_update = 1
    else if (! -e Include_lines/file_list) then 
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because ${cwd}/file_list does not exist." 
        set must_update = 1
    else if (! -e Include_lines/header_file_list.new) then 
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because ${cwd}/header_file_list.new does not exist." 
        set must_update = 1
    else if (! -e Include_lines/header_file_list) then 
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because ${cwd}/header_file_list does not exist." 
        set must_update = 1
    else if (! -e Include_lines/full_file_list) then 
        ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because ${cwd}/full_file_list does not exist." 
        set must_update = 1
    else 
        # Look for an early exit. If the files that are here now are the same as the
        # last time we updated Include_lines/file_list, then we do not need to update.
        # If the files are different, then we do some further work to safely determine if
        # any of them are source files which is more expensive. We do not even bother
        # sorting because switching machines is not very frequent. If we go beyond the
        # quick test, then Include_lines/full_file_list.new will update
        # Include_lines/full_file_list at the end of this file. 
        #
        /bin/ls -1 > Include_lines/full_file_list.new

        if (-e Include_lines/full_file_list) then
            ${IVI_DIFF_TEST} Include_lines/full_file_list Include_lines/full_file_list.new > /dev/null

            if (! ${status}) then 
                ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 is done in $cwd (file list has not changed)" 
                ${VERBOSE_ECHO} " "

                ${IVI_TOUCH} Include_lines/file_list.new
                ${IVI_TOUCH} Include_lines/header_file_list.new

                goto end_of_script
            else 
                ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 needs to update ${cwd}/Include_lines/file_list.new because file list changed." 
                set must_update = 1
            endif 
        endif 
    endif 
endif 

${MAKE_SCRIPT_PATH}stream_file_names -h -s -skip_incl | sort -u > Include_lines/file_list.new 
if (${status}) then
    set exit_status = 1
    goto end_of_script
endif 

# It does not really matter if the blocks are sorted together. We sort just to
# dodge different orders of delivery of files on different environments.
# 
${MAKE_SCRIPT_PATH}stream_script_names | sed '/^build$/d' | sort -u >>  Include_lines/file_list.new
if (${status}) then
    set exit_status = 1
    goto end_of_script
endif 

# TODO. I have lost track of why we do this (testing?) but it is clearly
# harmless. Ideally we should be able to be more clear in this comment.
#
if (-e 'input') then
    echo 'input' >> Include_lines/file_list.new
endif 

if (-e Include_lines/file_list) then
    ${IVI_DIFF_TEST} Include_lines/file_list Include_lines/file_list.new > /dev/null
    if (${status}) then 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Updating Include_lines/file_list in $cwd (found difference with file_list.new)." 

        ${IVI_CP} Include_lines/file_list.new Include_lines/file_list

        if (${status}) then
            echo "Copy (overwrite) Include_lines/file_list.new Include_lines/file_list returned with error status in `pwd`."
            echo "If it reporting that it cannot succed due to the file already existing,"
            echo "it is likely due to corner cases of parallel make and can be ignored for now."
        endif 

        set must_update = 1
    endif 
else
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Updating Include_lines/file_list (does not exist) in directory $cwd." 

    ${IVI_CP} Include_lines/file_list.new Include_lines/file_list

    if (${status}) then
        echo "Copy (fresh) Include_lines/file_list.new Include_lines/file_list returned with error status in `pwd`."
        echo "If it reporting that it cannot succed due to the file already existing,"
        echo "it is likely due to corner cases of parallel make and can be ignored for now."
    endif 

    set must_update = 1
endif 

${VERBOSE_ECHO} "${VERBOSE_INDENT}Working on Include_lines/header_list.new in $cwd." 

${MAKE_SCRIPT_PATH}stream_file_names -h  -skip_incl |  sort -u > Include_lines/header_file_list.new 
if (${status}) then
    set exit_status = 1
    goto end_of_script
endif 

if (-e Include_lines/header_file_list) then
    ${IVI_DIFF_TEST} Include_lines/header_file_list Include_lines/header_file_list.new > /dev/null
    if (${status}) then 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Updating Include_lines/header_file_list in $cwd (found difference with header_file_list.new)." 

        ${IVI_CP} Include_lines/header_file_list.new Include_lines/header_file_list

        if (${status}) then
            echo "Copy (overwrite) Include_lines/header_file_list.new Include_lines/header_file_list returned with error status in `pwd`."
            echo "If it reporting that it cannot succed due to the file already existing,"
            echo "it is likely due to corner cases of parallel make and can be ignored for now."
        endif 

        set must_update = 1
    else 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Include_lines/header_file_list does not need updating." 
    endif 
else
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Updating Include_lines/header_file_list in $cwd (as it does not exist)." 
    
    ${IVI_CP} Include_lines/header_file_list.new Include_lines/header_file_list

    if (${status}) then
        echo "Copy (fresh) Include_lines/header_file_list.new Include_lines/header_file_list returned with error status in `pwd`."
        echo "If it reporting that it cannot succed due to the file already existing,"
        echo "it is likely due to corner cases of parallel make and can be ignored for now."
    endif 

    set must_update = 1
endif 

/bin/ls -1 > Include_lines/full_file_list

if (${must_update}) then
    set actually_updated = 0 

    set include_line_files = `${MAKE_SCRIPT_PATH}stream_file_names Include_lines -s -h -skip_incl`

    # Check for deletes and moves (part 1).
    
    foreach inc_file (${include_line_files}) 
        set source_file = `echo ${inc_file} | sed 's#Include_lines/##'`

        if (! -e "${source_file}") then
            ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 is deleting Include_lines/${source_file} and Include_lines/new/${source_file}."

            ${IVI_RM} Include_lines/${source_file}
            ${IVI_RM} Include_lines/new/${source_file}

            set actually_updated = 1
        endif
    end

    set source_files = `${MAKE_SCRIPT_PATH}stream_file_names -s -h` 

    # Check for adds and moves (part 2).
    
    foreach source_file (${source_files}) 
        set inc_file = Include_lines/${source_file}
        set new_inc_file = Include_lines/new/${source_file}

        if (! -e "${inc_file}") then
            ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 is adding ${inc_file} in ${cwd}." 

            # Changes here should be checked against similar lines in
            # build_include_lines
            #
            sed -n '/^[ 	]*#[ 	]*include[ 	][ 	]*["<].*\.[hH][px]*[">][ 	]*\/*/p' ${source_file} | sed 's@.*\([<"][A-Za-z0-9/_-]*\.[hH][px]*[>"]\).*$@\1@' > ${new_inc_file}.tmp.$$
            if (${status}) then
                ${P_STDERR} "Making a list of include lines into ${new_inc_file}.tmp.$$ failed."
                set exit_status = 1
                goto end_of_script
            endif 

            # This previous version assumes an overly restricted version of how
            # we do #define's.  However there is no problem risking a spurious
            # IVI_HAVE. So we loosen the search criterion.
            #
            #      sed -n '/^#[ 	]*ifdef[ 	][ 	]*IVI_HAVE_[A-Z0-9_][A-Z0-9_]*/p' ${source_file} | sed 's/.*\(IVI_HAVE_[A-Z0-9_][A-Z0-9_]*\)/\1/' >> ${new_inc_file}.tmp.$$
            #
            # Looser search criterion.
            #
            sed -n '/^[ 	]*#[ 	]*[ie].*IVI_HAVE_[A-Z0-9_][A-Z0-9_]*/p' ${source_file} | sed 's/||/\n/' | sed 's/&&/\n/' | sed -n '/IVI_HAVE_/p' | sed 's/.*\(IVI_HAVE_[A-Z0-9][A-Z0-9_]*\).*/\1/' >> ${new_inc_file}.tmp.$$
            if (${status}) then
                ${P_STDERR} "Adding IVI_HAVE lines into  ${new_inc_file}.tmp.$$ failed."
                set exit_status = 1
                goto end_of_script
            endif 

            sort -u ${new_inc_file}.tmp.$$ > ${new_inc_file}
            if (${status}) then
                set exit_status = 1
                goto end_of_script
            endif 

            ${IVI_RM} ${new_inc_file}.tmp.$$
            if (${status}) then
                set exit_status = 1
                goto end_of_script
            endif 

            ${IVI_CP} ${new_inc_file} ${inc_file}
            if (${status}) then
                set exit_status = 1
                goto end_of_script
            endif 

            set actually_updated = 1
        endif
    end

    # This looks wrong (20/08/01) 
#     if ((${actually_updated}) || (! -e Include_lines/include_lines.new))  then
#         ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 is updating Include_lines/include_lines in directory ${cwd}."
#         ${VERBOSE_ECHO} " "
# 
#         ${IVI_TOUCH} Include_lines/include_lines 
#         ${IVI_TOUCH} Include_lines/include_lines.new 
#     endif 
    
#     if (${actually_updated}) then
#         ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 sees that include_lines needs updating in directory ${cwd}."
#         ${VERBOSE_ECHO} "${VERBOSE_INDENT}Removing Include/include_lines and Include_lines/include_lines.new in ${cwd}."
#         ${VERBOSE_ECHO} " "
# 
#         ${IVI_RM} Include_lines/include_lines 
#         ${IVI_RM} Include_lines/include_lines.new 
#     endif 

    # More finesse than the above. 

    if ((${actually_updated}) || (! -e Include_lines/include_lines) || (! -e Include_lines/sub_lib_list)) then
        ${VERBOSE_ECHO} " "
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_file_list_2 sees that include_lines needs updating in directory ${cwd}."
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Asking build_include_lines_2 for a local build of include_lines in ${cwd}."
        ${VERBOSE_ECHO} " "

        # It is tempting to do as much as we can, but if we let it happen through
        # make_sub_libs_needed we can get better parallelism and a signicant
        # speed up in many cases. So we do a shallow (local) build of
        # include_lines.

        setenv BUILD_LOCAL_INCLUDE_LINES
        ${MAKE_SCRIPT_PATH}build_include_lines_2 
        if (${status}) set exit_status=1
    endif 

endif 

end_of_script:

${VERBOSE_ECHO} "${VERBOSE_INDENT}Leaving script build_file_list_2 in directory $cwd with status ${exit_status}."

exit ${exit_status} 

