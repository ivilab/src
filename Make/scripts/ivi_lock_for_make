#!/bin/tcsh -f 

##############################################################################
#
# Identification:
#     A script to lock and build a target only once
#
# Usage:
#     ivi_lock_for_make [ max time ] [ target ] [ command ] [ command arguments ]
#
#
# Description:
#     Locking serializes execution, but once a second process, having been
#     assigned the same task as a first, gets the lock, it will redo the build a
#     second time. This is wasteful and confusing. 
#
#     If there is only one instant of make running, and if all dependencies
#     are exposed to make, and the makefiles are correct, then neither locking, nor ensuring only single
#     execution of the task should be needed. However, the ivi build system has
#     hidden targets, ans sometimes we run multiple instances of make either on
#     purpose or by accident. Especially for hidden targets, we want to consider
#     using this script. 
#
# Author:
#     Kobus Barnard 
#
##############################################################################

# We assume that init_scripts has been called as this script is largely used as
# part of the IVI build system reflected by the fact that it lives in Make.
# Thus, we have P_STDERR, VERBOSE_ECHO, and MAKE_SCRIPT_PATH. 

if ($?IVI_SET_ECHO) then
    set echo
endif 

${VERBOSE_ECHO} ""
${VERBOSE_ECHO} "${VERBOSE_INDENT}In ivi_lock_for_make with args: $*"

if ($# < 3) then
    ${P_STDERR} "Script ivi_lock_for_make needs at least three arguments."
    exit 1
endif 

onintr ivi_lock_for_make_bail

set exit_status = 0

set max_time_to_wait = "$1"

# Don't really need to error check as ivi_lock_create does it, but this might
# help get to the source faster.
#
set max_time_to_wait = "$1"

if ("${max_time_to_wait}" == "") then
    ${P_STDERR} "Script ivi_lock_for_make received a null first argument."
    exit 1 
endif 

set check_time_arg = `echo "${max_time_to_wait}" | sed 's/[0-9]//g'`
if ("${check_time_arg}" != "") then
    ${P_STDERR} "Script ivi_lock_for_make first arg (${max_time_to_wait} must be a non-negative integer."
    exit 1 
endif 

${IVI_MKDIR} "${IVI_LOCKFILE_PATH}"
if ($status) then
    $P_STDERR "Unable to make directory ${IVI_LOCKFILE_PATH}"
    exit 1
endif 

set target = "$2"

if (! $?IGNORE_BUILD_START_TIME) then
    if ($?BUILD_START_TIME_FILE) then
        if ((-e "${BUILD_START_TIME_FILE}") && (-e "${target}")) then
            ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make comparing age of ${BUILD_START_TIME_FILE} to that of ${target}."
            set already_built = `${IVI_SRC_PATH}Make/scripts/test_older_than "${BUILD_START_TIME_FILE}" "${target}"`
            if ($status) exit ${status}

            if ($already_built) then
                ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make reporting that ${target} is newer than ${BUILD_START_TIME_FILE} (early exit)."
                exit 0
            endif 
        endif 
    endif 
endif 

set cmd_str = `echo ${3} | sed 's#.*/##'`
set lock_label = "${cmd_str}"
if ($# > 3) then
    if ("${4}" == "") then
        set first_arg = "NULL"
    else 
        set first_arg = `echo ${4} | sed 's#//*$##' | sed 's#.*/##' `

        if ("${first_arg}" == "") then
            ${P_STDERR} "Script ivi_lock unable to make non-empty string out of command arg: |$4|"
            exit 1
        endif 
    endif 
    
    set lock_label = "${lock_label}_${first_arg}"
endif 

# Last path component.
set dir_str = `echo ${cwd} | sed 's#.*/##'`

set lock_label = "${lock_label}_${dir_str}"

# This can be a pretty long string, leading to filenames that are too long.
# set target_label = `${MAKE_SCRIPT_PATH}label_arg_to_file_str ${target}`

# Use last path component instead
set target_label = `echo ${target} | sed 's#.*/##'`
if ($status) exit 1

set target_label = "${dir_str}_${lock_label}"

set time_stamp_file = "${dir_str}_${target_label}.$$"
set time_stamp_file = "${IVI_LOCKFILE_PATH}${time_stamp_file}"
${IVI_CREATE} ${time_stamp_file}

if (${status}) then
    ${P_STDERR} "Creation of ${time_stamp_file} failed in ivi_lock_for_make. Doing without."
    set time_stamp_file = DOES_NOT_EXIST
endif 

set requesting_pid = `ps -p $$ -o ppid=`
${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make setting lock ${lock_label} for ${requesting_pid} working on target ${target}."

# This bit of shared code sets "safe_to_lock" and requires "lock_label".
source ${MAKE_SCRIPT_PATH}check_for_deadlock
if (${status}) exit ${status} 

set already_built =  0

if (${safe_to_lock}) then
    ${MAKE_SCRIPT_PATH}ivi_lock_create ${max_time_to_wait} ${lock_label} ${requesting_pid}
    if ($status) then 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make failed to get lock ${lock_label} for target ${target}"
        exit 1
    endif 

    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make got lock ${lock_label} for target ${target}"

    if (-e "${target}") then 
        # I ran into a problem that the time stamp file could not be created
        # because its name was too long for mac os. I shortened the name, but I
        # am keeping the check. 
        #
        if (-e "${time_stamp_file}") then 
            ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make comparing age of ${time_stamp_file} to that of ${target}."
            set already_built = `${IVI_SRC_PATH}Make/scripts/test_older_than "${time_stamp_file}" "${target}"`
            if ($status) exit ${status}
            ${IVI_RM} "${time_stamp_file}"
        endif 
    endif 
endif 

if ($already_built) then
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make reporting ${target} was built while we waited for the lock (early exit)."
else 
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make reporting that ${target} still needs to be built."
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make executing: $argv[3-$#] in $cwd."

    if ($?IVI_VERBOSE) then
        set start_time = `date +%H:%M:%S`
    endif 

    $argv[3-$#] 
    set exit_status = $status 

    if ($?IVI_VERBOSE_2) then
        set end_time = `date +%H:%M:%S`
        set program_name = "$argv[3]"
        echo "VB2: ${VERBOSE_INDENT}Script ivi_lock_for_make finished executing ${program_name} with time ${1} in $cwd with status ${exit_status}"
        echo "VB2: ${VERBOSE_INDENT}Ivi_lock_for_make start time for ${program_name}: ${start_time}"
        echo "VB2: ${VERBOSE_INDENT}Ivi_lock_for_make   end time for ${program_name}: ${end_time}"
    endif 
endif 

if (${safe_to_lock}) then
    ${MAKE_SCRIPT_PATH}ivi_lock_remove ${lock_label} ${requesting_pid}
endif 

${VERBOSE_ECHO} "${VERBOSE_INDENT}Done with call to ivi_lock_for_make with args: $*"
${VERBOSE_ECHO} ""

cleanup: 

# Restore 
onintr
    
exit ${exit_status}

# We should not be here unless onintr

ivi_lock_for_make_bail:

${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ doing ivi_lock_for make got an interrupt."

# If we are not locking or even if we are, then the lock_file variable might not
# be set when we got interrupted.

if (${safe_to_lock}) then
    if (${?lock_file}) then 
        if (-e "${lock_file}") then 
            ${P_STDERR} "Script ivi_lock_for_make process $$ removing lock file ${lock_file} because of interrupt."
            ${P_STDERR} " "
            ${IVI_RM} "${lock_file}"
        endif 
    endif 
endif 

exit 1

