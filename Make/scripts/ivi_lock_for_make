#!/bin/tcsh -f 

##############################################################################
#
# Identification:
#     A script to lock and build a target only once
#
# Usage:
#     ivi_lock_for_make {max_time} {target} {command} [command arguments]
#
# Description:
#     This script executes a command under a lock, but also prevents a second
#     process from doing the same thing once it gets the lock. To explain
#     further, basic locking serializes execution, but once a second process,
#     having been assigned the same task as a first, gets the lock, it will redo
#     the build a second time. This is wasteful and confusing. 
#
#     If there is only one instant of make running, and if all dependencies are
#     exposed to make, and the makefiles are correct, then neither locking, nor
#     ensuring only single execution of the task should be needed. However, the
#     ivi build system has hidden targets which are built as the consequence of
#     make driven commands but this is not exposed to make. We also sometimes we
#     run multiple instances of make either on purpose or by accident.
#     Especially for hidden targets, we want to consider using this script. 
#
#     The second argument is only used for early exit. If it will never exist,
#     then it has no effect, but in this case, using ivi_lock might make more
#     sense. 
#
# Author:
#     Kobus Barnard 
#
##############################################################################

# We assume that init_scripts has been called as this script is largely used as
# part of the IVI build system reflected by the fact that it lives in Make.
# Thus, we have P_STDERR, VERBOSE_ECHO, and MAKE_SCRIPT_PATH. 

if ($?IVI_SET_ECHO) then
    set echo
endif 

${VERBOSE_ECHO} ""
${VERBOSE_ECHO} "${VERBOSE_INDENT}In ivi_lock_for_make with args: $*"

if ($# < 3) then
    ${P_STDERR} "Script ivi_lock_for_make needs at least three arguments."
    exit 1
endif 

set exit_status = 0

# Don't really need to error check as ivi_lock_create does it, but this might
# help get to the source faster.
#
set max_time_to_wait = "$1"

if ("${max_time_to_wait}" == "") then
    ${P_STDERR} "Script ivi_lock_for_make received a null first argument."
    exit 1 
endif 

set check_time_arg = `echo "${max_time_to_wait}" | sed 's/[0-9]//g'`
if ("${check_time_arg}" != "") then
    ${P_STDERR} "Script ivi_lock_for_make first arg (${max_time_to_wait} must be a non-negative integer."
    exit 1 
endif 

set target = "$2"

set full_cmd = "$argv[3-$#]"

set lock_label = ""
foreach cmd_part (${full_cmd})
    set cmd_part_no_path = `echo "${cmd_part}" | ${IVI_SED} 's#//*$##' | ${IVI_SED} 's#.*/##' `

    if ("${cmd_part_no_path}" == "") then
        set cmd_part_no_path = "NULL"
    else 
        set cmd_part_no_path = `echo ${cmd_part_no_path} | sed 's/^[1-9][0-9]*$//'`
        if ("${cmd_part_no_path}" == "") then
            set cmd_part_no_path = "NUMBER"
            ${VERBOSE_ECHO} "${VERBOSE_INDENT}Positive integer argument ${cmd_part} is ignored by ivi_lock as it is too likely to be spuriously unique."
        endif 
    endif 

    if ("${lock_label}" == "") then
        set lock_label = "${cmd_part_no_path}"
    else
        set lock_label = "${lock_label}_${cmd_part_no_path}"
    endif 
end

set dir_str = `echo ${cwd} | ${IVI_SED} "s#${HOME}/##" | ${IVI_SED} 's#^/##g' | ${IVI_SED} 's#/#_#g'`
set lock_label = "${lock_label}_${dir_str}"

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make setting lock_label to ${lock_label}."

# This can be a pretty long string, leading to filenames that are too long.
# set target_label = `${MAKE_SCRIPT_PATH}label_arg_to_file_str ${target}`

# Use last path component instead
set target_label = `echo ${target} | sed 's#.*/##'`
if ($status) exit 1

set only_set_lockfile_directory
source ${MAKE_SCRIPT_PATH}set_lockfile_name
if (${status}) exit ${status} 

set time_stamp_file = "target_time_stamp_${target_label}_${SHORT_HOST}.$$"
set time_stamp_file = "${IVI_LOCKFILE_PATH}${time_stamp_file}"
${IVI_TOUCH} ${time_stamp_file}

if (${status}) then
    ${P_STDERR} "Touch of ${time_stamp_file} failed in ivi_lock_for_make. Doing without."
    set time_stamp_file = DOES_NOT_EXIST
endif 

set requesting_pid = `ps -p $$ -o ppid=`
${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make setting lock ${lock_label} for ${requesting_pid} working on target ${target} in ${cwd}."

# This bit of shared code sets "safe_to_lock" and requires "lock_label".
source ${MAKE_SCRIPT_PATH}check_for_deadlock
if (${status}) then 
    set exit_status = 1
    goto cleanup
endif 

onintr ivi_lock_for_make_bail

set already_built =  0

if (${safe_to_lock}) then
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make calling ivi_lock_create ${max_time_to_wait} ${lock_label} ${requesting_pid} in ${cwd}"
    ${MAKE_SCRIPT_PATH}ivi_lock_create ${max_time_to_wait} ${lock_label} ${requesting_pid}
    if ($status) then 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make failed to get lock ${lock_label} for target ${target}"
        set exit_status = 1
        goto cleanup
    endif 

    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make got lock ${lock_label} for target ${target} in ${cwd}"

    if (-e "${target}") then 
        # I ran into a problem that the time stamp file could not be created
        # because its name was too long for mac os. I shortened the name, but I
        # am keeping the check. 
        #
        if (-e "${time_stamp_file}") then 
            ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make comparing age of ${time_stamp_file} to that of ${target} in ${cwd}."
            set already_built = `${IVI_SRC_PATH}Make/scripts/test_older_than "${time_stamp_file}" "${target}"`

            if (${status}) then 
                set exit_status = 1
                goto cleanup
            endif 
        endif 
    endif 
else 
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make not locking because of deadlock risk."
endif 

if ($already_built) then
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make reporting ${target} ($cwd) was built while we waited for the lock (early exit)."
else 
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make reporting that ${target} ($cwd) still needs to be built."
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_for_make executing: ${full_cmd} in $cwd."

    if ($?IVI_VERBOSE) then
        set start_time = `${IVI_ECHO_TIME}`
    endif 

    ${full_cmd}
    set exit_status = $status 

    if ($?IVI_VERBOSE_2) then
        set end_time = `${IVI_ECHO_TIME}`
        set program_name = "$argv[3]"
        echo "VB2: ${VERBOSE_INDENT}Script ivi_lock_for_make finished executing ${program_name} with time ${1} in $cwd with status ${exit_status}"
        echo "VB2: ${VERBOSE_INDENT}Ivi_lock_for_make start time for ${program_name}: ${start_time}"
        echo "VB2: ${VERBOSE_INDENT}Ivi_lock_for_make   end time for ${program_name}: ${end_time}"
    endif 
endif 

if (${safe_to_lock}) then
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make calling ivi_lock_remove ${lock_label} ${requesting_pid}"
    ${MAKE_SCRIPT_PATH}ivi_lock_remove ${lock_label} ${requesting_pid}
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make back from ivi_lock_remove ${lock_label} ${requesting_pid}"
else 
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock_for_make not removing lock because none was set due to deadlock risk."
endif 

${VERBOSE_ECHO} "${VERBOSE_INDENT}Done with call to ivi_lock_for_make with args: $*"
${VERBOSE_ECHO} ""

cleanup: 
    ${IVI_RM} "${time_stamp_file}"
    exit ${exit_status}

# We should not be here unless onintr

ivi_lock_for_make_bail:
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ doing ivi_lock_for make got an interrupt."

    # If we are not locking or even if we are, then the lock_file variable might not
    # be set when we got interrupted.

    if (${safe_to_lock}) then
        if (${?lock_file}) then 
            if (-e "${lock_file}") then 
                ${P_STDERR} "Script ivi_lock_for_make process $$ removing lock file ${lock_file} because of interrupt."
                ${P_STDERR} " "
                ${IVI_RM} "${lock_file}"
            endif 
        endif 
    endif 

    ${IVI_RM} "${time_stamp_file}"

    exit 1

