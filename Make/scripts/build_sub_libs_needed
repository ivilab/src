#!/bin/tcsh -f

##################################################################################
#
# This script builds the file Include_lines/sub_libs_needed in the directory
# given by the first parameter. If that parameter is not set or empty, then we
# build in the current directory. The file Include_lines/sub_libs_needed
# contains a single line that lists sub-directories needed by the code in the
# requested directory ordered so that sub-directory are preceded by all
# sub-directories that it might depend on. 
#
# Here 'needed' goes beyond what can be found by recursively examining header
# files, which is what the tool 'makedepend' does.  We want to know about
# dependencies due to C files in library sub-dirs. Further we want the library
# sub-directories to be ordered so that all items have all their dependencies
# preceding them. For various tasks the script build_makefile_dirs will use the
# list in either forward or reverse order. Note that this assumes that the IVI
# library has a tree structured dependency graph. If this is not the case, then
# circular dependencies will be identified by this script. True circular
# dependencies need to be corrected manually. 
#
# To proceed, we find all sub-libs needed by the code in the requested
# directory. We then prepend that list with content of
# Include_lines/sub_libs_needed in each directory in the list. This requires
# ensuring that these Include_lines/sub_libs_needed are up to date, and building
# them if needed. Hence this script may be called recursively. Currently this is
# via either by a call to build_include_lines_2 which will call from our helper
# script, build_sub_libs_needed_2.

if ($?IVI_SET_ECHO) then
    set echo
endif 

if ($?VERBOSE_INDENT) then
    setenv VERBOSE_INDENT "    ${VERBOSE_INDENT}"
else 
    setenv VERBOSE_INDENT ""
endif 

@ num_args = ${#argv}

if ("${num_args}" > 2) then
    ${P_STDERR} "Script build_sub_libs_needed takes only 0, 1, or 2 parameters."
    exit 1 
endif 

set build_dir = ""

if ("${num_args}" >= 1) then
    if ("${1}" != "") then
        set build_dir = `echo ${1} | sed 's/ *//g'`
    endif 
endif 

if ("${build_dir}" != "") then
    set build_dir = `echo ${build_dir} | sed 's#//*#/#g' | sed 's#/$##'`
    cd ${build_dir} 
endif 

# This might be OBSOLETE. 
if ("${num_args}" >= 2) then
    set parent_sub_lib = "${2}"
else  
    set parent_sub_lib = ""
endif 

set current_sub_lib = `echo ${cwd} | sed 's#.*/lib/\([^/]*\)$#\1#'`

if ("${current_sub_lib}" == "${cwd}") then
    set current_sub_lib = ""
endif 

#########################################################

if (! $?TMP_SUB_DIRS_VISITED) then
    setenv TMP_SUB_DIRS_VISITED ""
endif 

#########################################################

${VERBOSE_ECHO_2} " "
${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Beginning recursive build of ${cwd}/Include_lines/sub_libs_needed"

${VERBOSE_ECHO} "${VERBOSE_INDENT}Entering script build_sub_libs_needed in directory ${cwd}"
${VERBOSE_ECHO_2} "${VERBOSE_INDENT}    build_dir: ${build_dir}"
${VERBOSE_ECHO_2} "${VERBOSE_INDENT}    parent_sub_lib: ${parent_sub_lib}"
${VERBOSE_ECHO_2} "${VERBOSE_INDENT}    current_sub_lib: ${current_sub_lib}"
${VERBOSE_ECHO_2} "${VERBOSE_INDENT}    TMP_SUB_DIRS_VISITED: ${TMP_SUB_DIRS_VISITED}"
${VERBOSE_ECHO_2} " "

#########################################################

if ("${current_sub_lib}" != "") then
    set circular = 0
    foreach tmp_sub_dir_visited (${TMP_SUB_DIRS_VISITED})
        if ("${tmp_sub_dir_visited}" == "${current_sub_lib}") then
            set circular = 1
            ${P_STDERR} " "
            ${P_STDERR} "Circular dependency spotted."
            echo -n "    ${tmp_sub_dir_visited} depends on " > /dev/stderr
            continue
        endif 

        if (${circular}) then 
            ${P_STDERR} "${tmp_sub_dir_visited}"
            echo -n "    ${tmp_sub_dir_visited} depends on " > /dev/stderr
        endif
    end

    if (${circular}) then 
        ${P_STDERR} "${current_sub_lib}"
        ${P_STDERR} " "
#         echo "Removing ${cwd}/Include_lines/sub_lib_list"
#         ${IVI_RM} "${cwd}/Include_lines/sub_lib_list"
#         echo " "

        exit 1
    endif
endif 

setenv TMP_SUB_DIRS_VISITED "${TMP_SUB_DIRS_VISITED} ${current_sub_lib}"

################################################################################

if (! -e Include_lines/sub_lib_list) then
    ${WARN_ECHO} "Script build_sub_libs_needed reporting unexpected missing ${cwd}/Include_lines/sub_lib_list."
    ${WARN_ECHO} "Script build_sub_libs_needed calling build_file_list_2 which should build ${cwd}/Include_lines/sub_lib_list."
    ${MAKE_SCRIPT_PATH}ivi_lock_for_make 120 Include_lines/file_list ${MAKE_SCRIPT_PATH}build_file_list_2
    if (${status}) exit 1
endif 

if ("${current_sub_lib}" != "") then
    set skip_str = "\<${current_sub_lib}\>"
    set recurse_dirs = `cat Include_lines/sub_lib_list | grep -v ${skip_str}`
else
    set recurse_dirs = `cat Include_lines/sub_lib_list`
endif 

if ($?BUILD_SUB_LIBS_SERIAL) then
    set build_type = "serial"
else 
    set build_type = "parallel"
endif 

${VERBOSE_ECHO} ""
${VERBOSE_ECHO} "${VERBOSE_INDENT}vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_sub_libs_needed calling build_sub_libs_needed_2 for building sub_libs_needed ${build_type}."
${VERBOSE_ECHO} "${VERBOSE_INDENT}Recurse dirs in build_sub_libs_needed in ${cwd} are: ${recurse_dirs}" 
${VERBOSE_ECHO} ""

set build_sub_libs_status = 0

# The sed removes most annoying job control output, specifically the ones
# that do not loose the new line due to parallel output intertwining. We do
# not use grep in pipes if we plan to use the exit status, as grep will have exit status
# 1 if no lines are selected. 
#
${MAKE_SCRIPT_PATH}build_sub_libs_needed_2 ${recurse_dirs} |& ${IVI_SED}  '/^\[[1-9]/d'
if (${status}) set build_sub_libs_status = 1

if (${build_sub_libs_status}) then 
    ${P_STDERR} "Script build_sub_libs_needed reporting build_sub_libs_needed_2 failed in ${cwd}."
    ${P_STDERR} "Script build_sub_libs_needed_2 ${build_type} args were: ${recurse_dirs}."
    exit 1
else 
    ${VERBOSE_ECHO} ""
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script build_sub_libs_needed back from build_sub_libs_needed_2 building sub_libs_needed ${build_type}."
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
    ${VERBOSE_ECHO} ""
endif

${VERBOSE_ECHO} "${VERBOSE_INDENT}Leaving script build_sub_libs_needed in ${cwd} with success."

