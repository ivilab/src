#!/bin/tcsh -f

# set echo 

# All variables that can affect the output of the test code should be listed
# here. However, because there could be conflict with the setting we want for
# this script, or could be lingering (e.g., we may have IVI_VERBOSE set for
# debugging this script, or simply for habbit, we use shadow versions with the
# prefix TEST. Thus, if you wish to run the actual tests with IVI_VERBOSE=1, you
# need to set TEST_IVI_VERBOSE=1. 
#
# These vars will be unset if they are not to be overridden by "TEST_" version
# values, followed by sourcing the contents of a manually constructed ENV file
# in the input directory (if it exists---usually it does not), followed by
# setting them to the values of the "TEST_" version if that is set. Having said
# all that, these facilities are not used much. 

set env_vars_to_save = "IVI_VERBOSE IVI_OPTIONAL_ABORT"

if ($?IVI_QUIET) then
    set test_quietly = 1
else
    set test_quietly = 0
endif 

set test_rc = 0
set cannot_test_rc = 198
set bug_rc = 199
set valgrind_cmd = ""
set valgrind_error = 0

set num_args = $#argv

if ("${num_args}" < 6) then
    ${P_STDERR} "Script test_program_2 needs at least 6 arguments."
    set test_rc = ${bug_rc}
    goto end_of_script
endif 

# set echo 

set test_type = "$1"
set program = "$2"
set input_dir = "$3" 
set obj_dir = "$4"
set code_dir = "$5"
set run_dir = "$6"

# Only used for interactive mode which is a special case. 
set extra_args = "$7"

if ($?SKIP_BROKEN_TESTS) then
    set is_broken_test = `echo ${input_dir} | grep -c '\.broken$'`
    if (${is_broken_test}) then
        if (! ${test_quietly} ) then 
            echo "Skipping broken test ${input_dir} for program ${program}"
        endif 

        exit 0
    endif
endif 

if ($?SKIP_FAILING_TESTS) then
    set is_failing_test = `echo ${input_dir} | grep -c '\.fails$'`
    if (${is_failing_test}) then
        if (! ${test_quietly} ) then 
            echo "Skipping failing test ${input_dir} for program ${program}"
        endif 

        exit 0
    endif
endif

if ($?SKIP_SLOW_TESTS) then
    set is_slow_test = `echo ${input_dir} | grep -c '\.slow$'`
    if (${is_slow_test}) then
        if (! ${test_quietly} ) then 
            echo "Skipping slow test ${input_dir} for program ${program}"
        endif 

        exit 0
    endif
endif 

if (! ${test_quietly}) then 
    echo " "
    echo "=========================================================================="
    echo "vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
    echo "test_program_2 $*"
    echo " "
endif 

if ($?ASSUME_OUTPUT_IS_OK) then
    set assume_output_is_ok = 1
else
    set assume_output_is_ok = 0
endif 

# Usually set in test_program when called with the -s flag which usually
# happens via "make test_svn"  
if ($?ADD_TESTS_TO_SVN) then
    set add_test_to_svn = 1
else
    set add_test_to_svn = 0
endif 

set def_file = "${IVI_SRC_PATH}lib/l/l_def.h"


if (! -e "${def_file}") then
    echo "Unable to find ${def_file}"
    echo "Optimistically using ${cannot_test_rc} for EXIT_CANNOT_TEST"
else
    set cannot_test_rc = `grep '#[ 	]*define[ 	]*EXIT_CANNOT_TEST' "${def_file}" | sed 's/^[^0-9]*\([0-9]*\).*$/\1/'`
endif 

if (! -e "${def_file}") then
    echo "Unable to find ${def_file}"
    echo "Optimistically using ${bug_rc} for EXIT_BUG"
else
    set bug_rc = `grep '#[ 	]*define[ 	]*EXIT_BUG' "${def_file}" | sed 's/^[^0-9]*\([0-9]*\).*$/\1/'`
endif 

if (! ${test_quietly} ) then 
    echo "Script test_program_2 test_type is ${test_type}."
endif 

if ("${test_type}" == "test") then
    set test_description = "Initial run"
    set test_result = "finished" 

    if (! ${test_quietly} ) then 
        echo "Running initial test to establish valid output for ${program} with input ${input_dir}."
    endif 
else if ("${test_type}" == "regress") then
    set test_description = "Regression testing"
    set test_result = "passed"

    if (! ${test_quietly} ) then 
        echo "Running regression tests on ${program} with input ${input_dir}."
    endif 
else if ("${test_type}" == "check") then
    set test_description = "Checking for output_checked"
    set test_result = "succeeded"

    if (! ${test_quietly} ) then 
        echo "Checking on manually maintained 'output_checked' file."
    endif 
else if ("${test_type}" == "svn") then
    set test_description = "Adding files that are ready for svn"
    set test_result = "succeeded" 

    if (! ${test_quietly} ) then 
        echo "Adding files that are ready for svn."
    endif 
else if ("${test_type}" == "interactive") then
    set test_description = "Interactive testing"
    set test_result = "succeeded"

    if (! ${test_quietly} ) then 
        echo "Interactive run of ${program}."
    endif 
else 
    ${P_STDERR} "First argument to script test_program_2 is invalid."
    ${P_STDERR} "Under the assumption that it is only called from test_program, this is a bug."

    set test_rc = ${bug_rc}
    goto end_of_script
endif 


if ("${test_type}" == "interactive") then
    ${IVI_MAKE} ${program}

    if ($status) then
        ${P_STDERR} "Unable to build ${program}"
        exit 1
    endif 
endif 

set src_code = ""
foreach suffix (c cpp cxx C)
    if (-e "${program}.${suffix}") then
        set src_code = "${program}.${suffix}"
        break
    endif 
end

if ("${src_code}" == "") then
    ${P_STDERR} "Script test_program_2 cannot find the source code for ${program} in `pwd`"
    ${P_STDERR} "It might only be needed to decide if we should be under SVN control,"
    ${P_STDERR} "but its non-existence suggests something is wrong."
    set test_rc = ${bug_rc}
    goto end_of_script
endif 

svn info "${src_code}" >& /dev/null

if (${status}) then
    set src_is_under_svn = 0
else
    set src_is_under_svn = 1
endif 

set prog_path = "NOT_SET"

# Fancy bit. Target "test" should not depend on the executable but we want the
# executable to be up to date. Making it here does not work well for parallel
# makes because then shared targets such as "depend" and library modules are
# being made by multiple calls to make which only has a chance of working
# because we use lockfiles. However, that is inefficient. Instead, we have
# build-2 do a make all, so the executable should be up to date by the time we
# get here.

if (("${test_type}" != "check") && ("${test_type}" != "svn")) then
    if (! -x "${obj_dir}${program}") then
        ${P_STDERR} "Script test_program_2 unable to execute ${obj_dir}${program}"
        ${P_STDERR} "It should have been built by now, either via make or build-2, or this script."
        ${P_STDERR} "Presumably we have have a script or make bug."
        set test_rc = ${bug_rc}
        goto end_of_script
    endif 
endif 

set prog_path = "`pwd`/${obj_dir}${program}"

set input_dir_rel_path = "test_input/${program}/${input_dir}"

if (! -d "${input_dir_rel_path}") then
    ${P_STDERR} "Script test_program_2 unable to see directory ${input_dir_rel_path} in `pwd`"
    exit 1
endif

pushd ${input_dir_rel_path} > /dev/null
    if ($status) then 
        ${P_STDERR} "Script test_program_2 unable to push into directory ${input_dir_rel_path} in `pwd`"
        exit 1
    endif

    set input_dir_abs_path = `pwd`
popd > /dev/null

if (("${test_type}" == "test") || ("${test_type}" == "check") || ("${test_type}" == "svn")) then
    # Add input files to svn. The files in input should all be considered for svn. But we
    # do not just "add" the directory to simplify updating with svn later as things
    # change.

    if ("${src_is_under_svn}") then 
        # We already know that ${input_dir_rel_path} exists and is a directory.
        svn info "${input_dir_rel_path}" >& /dev/null

        if ($status) then
            set svn_command = "svn add --parents --depth=empty ${input_dir_rel_path}"

            if ($add_test_to_svn) then 
                ${MAKE_SCRIPT_PATH}ivi_lock 30 ${svn_command}
                set svn_cmd_status = ${status} 

                if (${svn_cmd_status}) then
                    set test_result = "FAILED (svn mkdir issue)." 
                    set test_rc = 0
                    goto finish_up
                endif 
            else if (! ${test_quietly} ) then 
                echo " "
                echo "Because ${src_code} is under SVN consider adding the input directory also: "
                echo "    cd `pwd`"
                echo "    ${svn_command}"
                echo "(or use 'make test_svn')."
                echo " "
            endif 
        endif 

        pushd ${input_dir_rel_path} > /dev/null
            set test_input_files = `${IVI_LS}`
            set svn_add_files = ""

            foreach svn_input_file (${test_input_files}) 
                if (-e "${svn_input_file}.FILTERED_FOR_DIFF") continue
                svn info ${svn_input_file} >& /dev/null

                if (${status}) then
                    set svn_add_files = "${svn_add_files} ${svn_input_file}"
                endif 
            end 

            if ("${svn_add_files}" != "") then
                set svn_command = "svn add ${svn_add_files}"

                if (${add_test_to_svn}) then
                    ${MAKE_SCRIPT_PATH}ivi_lock 30 ${svn_command}
                    set svn_cmd_status = ${status} 

                    if (${svn_cmd_status}) then
                        set test_result = "FAILED (svn add issue)." 
                        set test_rc = 0
                        goto finish_up
                    endif 
                else if (! ${test_quietly} ) then 
                    echo " "
                    echo "Because ${src_code} is under SVN consider entering: "
                    echo "    cd `pwd`"
                    echo "    ${svn_command}"
                    echo "(or use 'make test_svn')."
                    echo " "
                endif 
            endif 
        popd > /dev/null
    endif 
endif 

if ("${test_type}" == "interactive") then
    if ("${extra_args}" != "") then
        echo "${extra_args}" > ${input_dir_rel_path}/ARGS
    endif 

    setenv IVI_SKIP_DEPEND
    ${IVI_MAKE} make_bin_aux
    # ${IVI_MAKE} ${program}
endif 

if ("${test_type}" == "regress") then
    # Directory that we will compare with. 
    set test_run_dir = test_runs/${program}/${input_dir}/test/${code_dir}
    pushd "${test_run_dir}" > /dev/null
    if ($status) then
        ${P_STDERR} "Script test_program_2 unable to push into directory ${test_run_dir} from `pwd`"
        set test_rc = ${bug_rc}
        goto end_of_script
    endif 

    set test_run_dir = `pwd`
    set test_run_dir_files = `${IVI_LS} | grep -v '\.res$' | grep -v 'output_checked' | grep -v 'run_succeeded'  | grep -v 'valgrind_log_file' | grep -v 'test_time_stamp' | grep -v 'FAILED'  `
    popd > /dev/null
endif 

set input_files = `find ${input_dir_rel_path} -mindepth 1 -maxdepth 1 \! -name ENV`

if ("${input_files}" != "") then
    ${IVI_CP} ${input_files} "${run_dir}"
endif 

if ("${test_type}" == "test") then
    ${IVI_CAT} /dev/null > ${run_dir}/ENV1
    ${IVI_CAT} /dev/null > ${run_dir}/ENV2

    foreach env_var (${env_vars_to_save}) 
        # We use shadow version of the variables to prevent conflicts, with
        # the common use of IVI_VERBOSE for various purposes being one obvious
        # example of why this is needed. If the user actually wants to run tests
        # with an env var set to a specific value, they need to set the version
        # with the prefix "TEST_" instead.
        #
        set shadow_env_var = "TEST_${env_var}" 
        eval "set is_set = "'$?'"${shadow_env_var}"
        if (${is_set}) then
           eval "set env_var_val = "'$'"${shadow_env_var}"
           echo "setenv ${env_var} ${env_var_val}" >> ${run_dir}/ENV2
        else
           echo "unsetenv ${env_var}" >> ${run_dir}/ENV1
        endif 
    end

    if (-e "${input_dir_rel_path}ENV") then
        set input_env = "${input_dir_rel_path}ENV"
    else 
        set input_env = ""
    endif 

    ${IVI_CAT} ${run_dir}/ENV1 ${input_env} ${run_dir}/ENV2 > ${run_dir}/ENV
    ${IVI_RM}  ${run_dir}/ENV1 ${run_dir}/ENV2 > ${run_dir}/ENV
else if ("${test_type}" == "regress") then
    ${IVI_CP} ${test_run_dir}/ENV ${run_dir}/ENV
endif 

cd ${run_dir}

if (${status}) then
    ${P_STDERR} " "
    ${P_STDERR} "Script test_program_2 unable to change to directory ${run_dir} from `pwd`"
    ${P_STDERR} "Since test_program is already writing to a file in it, something is wrong (permissions?). "
    ${P_STDERR} " "
    set test_rc = 1
    goto end_of_script
endif 

if (-e "SKIP_TEST") then
    exit 0
endif 

if (-e "STDIN") then
    set stdin_file = "STDIN"
else
    set stdin_file = "/dev/null"
endif 

if (-e "ARGS") then
    set args = `cat ARGS`
else 
    set args = ""
endif 

# Valgrind on mac is not ready for prime time.
# Valgrind by default runs the memcheck tool. 
# Memcheck has limitations with respect to catching stack smashing errors. The
# tool 'exp-sgcheck' can catch some of them, perhaps with some false positives
# (we have not tries this yet). 
#
if (("${OS}" != "mac_osx") && (! $?SKIP_VALGRIND)) then 
    which valgrind >& /dev/null

    if (! ${status} ) then
        set valgrind_cmd = "valgrind --max-stackframe=2008328 --leak-check=full --show-leak-kinds=all --log-file=valgrind_log_file"
    endif 
endif 

set timeout_cmd = ""
set timeout = ""

if (-e "TIMEOUT") then
    which timeout >& /dev/null

    if (! ${status} ) then
        set timeout = `cat TIMEOUT`
        set timeout_cmd = "timeout ${timeout} "
    endif 
endif 

set start_time = `${IVI_ECHO_TIME}`

if ("${test_type}" == "check") then
    if (-e "run_succeeded") then
        set touch_command = "${IVI_TOUCH} `pwd`/output_checked"

        if (-e "output_checked") then
            # If we are here, make thinks output_checked is out of date.  We
            # only care if it exists, so we touch it. We could instead use the
            # script 'touch_if_exists' in the makefile, but this would mean a
            # double touch for the cases where it did not exist (no big deal,
            # just slightly less aesthetic).
            #
            ${VERBOSE_ECHO} "Touching existing `pwd`/output_checked"
            ${touch_command}
            if ${status} set test_rc = 1
        else if (${assume_output_is_ok}) then 
            if (! ${test_quietly} ) then 
                echo "Touching `pwd`/output_checked"
                echo "(due to ASSUME_OUTPUT_IS_OK)"
            endif 
            ${touch_command}
            if ${status} set test_rc = 1
        else 
            echo "Output files in:"
            echo "    `pwd`"
            echo "must be checked by a human (bypass with setenv ASSUME_OUTPUT_IS_OK)."
#           echo " "
            echo "If the output is OK, then enter:"
            echo "    ${touch_command}"
#           echo "Forcing failure until this is done." 
            echo " "
            set test_rc = 1
        endif 
    else
        ${P_STDERR} "Script test_program_2 expected file 'run_succeeded' to exist because 'make' sends us here after building it."
        set test_rc = ${bug_rc}
        goto end_of_script
    endif 

    if (${test_rc}) then
        if (-e "output_checked") then
            ${P_STDERR} "Script test_program_2 check has error return code even though 'output_checked' exists."
            set test_rc = ${bug_rc}
            goto end_of_script
        else
            set test_result = "FAILED ('output_checked' does not exist)"
        endif
    endif
           
    goto finish_up
endif 

# We should be in directory ${run_dir}.

if (("${test_type}" == "test") || ("${test_type}" == "regress") || ("{test_type}" == "interactive")) then
    # Test_types that involve running code. 
    #
    if (! ${test_quietly} ) then 
        echo "Begin running of ${program} in `pwd`"
    endif 

    if (! -e "ENV") then
        echo "No 'ENV' in `pwd`."
        echo "This is likely a bug."
    endif 

    if ("${test_type}" == "interactive") then
        # Not recently tested!

        echo " "
        echo "If ${program} expects tty input that is not via stdin, this won't work."
        echo "Also, output to stdout from ${program} should be flushed after EOL if stdout is not a file."
        echo "(This is already the case if you use IVI library routines such as 'pso')"
        echo " "

        if (-x "${MAKE_BIN_PATH}term_tee") then
            set term_tee = "${MAKE_BIN_PATH}term_tee"
            set tee_arg_2 = "${program}> "
        else
            set term_tee = tee
            set tee_arg_2 = ""
        endif 

        (source ENV; ${term_tee} ${input_dir_abs_path}/STDIN "${tee_arg_2}" | (${valgrind_cmd} ${prog_path} ${args}; echo $status > RC.tmp) | tee STDOUT ) |& tee STDERR
        
        set RC = `cat RC.tmp`
        ${IVI_RM} RC.tmp
        ${IVI_CP} ${input_dir_abs_path}/STDIN STDIN
        echo " "
    else
        ${VERBOSE_ECHO} 
        ${VERBOSE_ECHO} "PAREN ${prog_path} ${args} LESS ${stdin_file} GREATER STDOUT PAREN GREATER_AMP STDERR"

        (source ENV; ${timeout_cmd} ${valgrind_cmd} ${prog_path} ${args} < ${stdin_file} > STDOUT ) >& STDERR;
        set RC = $status
    endif 

    # echo RC: $RC

    # It is not obvious which of the more obscure RC should be considered buggy. 
    # So we provide the escape hatches ACCEPT_RC and REJECT_RC. Accept takes
    # precedence.
    #
    set accept_rc = 0
    set reject_rc = 0

    if (-e "ACCEPT_RC") then 
        set accept_rc = `cat ACCEPT_RC | grep -c ${RC}`
    endif 

    if (${accept_rc}) then
        if (! ${test_quietly} ) then 
            echo "Script test_program_2 forcing acceptence of RC=${RC}."
        endif 
    else
        if (-e "REJECT_RC") then 
            set reject_rc = `cat REJECT_RC | grep -c ${RC}`
        endif 

        if (${reject_rc}) then
            if (! ${test_quietly} ) then 
                echo "Script test_program_2 forcing rejection of RC=${RC}."
            endif 
        endif 

        if ((${reject_rc}) || (${RC} >= 124 )) then
            set rc_str = ""

            if (${RC} == ${bug_rc}) then
                set rc_str = " (BUG ENCOUNTERED)"
            else if (${RC} == ${cannot_test_rc}) then
                set rc_str = " (CANNOT TEST)"
            endif 

            set test_result = "FAILED (return code ${RC}${rc_str})." 
            set test_rc = 1
        endif 
    endif 

    echo "${RC}" > RC.TMP

    if (-e "RC") then 
        ${IVI_DIFF_TEST} "RC.TMP" "RC"
        if (${status}) then 
            if (-e "output_checked") then 
                echo "New RC will be different, but output_checked exists."
                echo "Removing output_checked to invalidate test. Intervention might be required."
                ${IVI_RM} "output_checked"
            endif 
            
            ${IVI_RM} "RC"
            ${IVI_MV} "RC.TMP" "RC"
        else 
            ${IVI_RM} "RC.TMP"
        endif 
    else 
        ${IVI_MV} "RC.TMP" "RC"
    endif 

    if ( ! ${test_rc}) then 
        if ("${valgrind_cmd}" != "") then
            set have_errors=`grep 'ERROR SUMMARY: ' < valgrind_log_file | grep -c -v 'ERROR SUMMARY: 0 errors'`
            set have_leaks = `grep  'in use at exit: ' < valgrind_log_file | grep -c -v 'in use at exit: 0 bytes'`

            if ((${have_errors}) && (${have_leaks}))  then
                set test_result = "FAILED (valgrind reports memory errors and leaks)." 
                set test_rc = 1
                set valgrind_error = 1
            else if (${have_errors} ) then
                set test_result = "FAILED (valgrind reports memory errors)." 
                set test_rc = 1
                set valgrind_error = 1
            else if (${have_leaks})  then
                set test_result = "FAILED (valgrind reports memory leaks)." 
                set test_rc = 1
                set valgrind_error = 1
            endif 
        endif 
    endif 

    if (-e "TEST_FAILURE_TESTING") then
        if (${test_rc}) then
            set test_rc = 0
            set test_result = "succeeded in detecting failure." 
         else
            set test_rc = 1
            set test_result = "FAILED in detecting failure." 
         endif 
    endif 

    if (${test_rc}) then
        # Do nothing
    else if (("${test_type}" == "test") || ("${test_type}" == "interactive")) then
        # New, June 2019.
        #
        if ("${test_type}" == "interactive") then
            echo "Script 'test_program_2' executing untested code for interactive around line 612."
        endif 

        set run_dir_files = `${IVI_LS} | grep -v '^FAILED$' | grep -v '.FILTERED_FOR_DIFF$' | grep -v '.TMP$' | grep -v '\.res$'| grep -v 'regression_test_passed' | grep -v 'valgrind_log_file' | grep -v 'test_time_stamp' |  grep -v '^ARGS$'  | grep -v '^ENV$'  |  grep -v '^output_checked$'  | grep -v '^run_succeeded$' | grep -v '^STDIN$'  `

        ${VERBOSE_ECHO} "Test run_dir_files: ${run_dir_files}"
        foreach test_output_file (${run_dir_files}) 
            # Is RC the only output file we want to check that does not need
            # this processing? 
            if ("${test_output_file}" != "RC") then
                ${VERBOSE_ECHO} "Filtering ${test_output_file} in ${cwd}"

                # Generally we should not be here if we already have these
                # files, but there are enough corner cases that we mitigate
                # against excessive SVN updates.  One example corner case is
                # changing this file, which sets off rebuilding the tests. So we
                # write to temporary locations (TMP suffix), and overwrite only
                # if they are differnt.
                #
                grep < ${test_output_file} -v 'ignore for test' | grep -v '/tmp/*[^/]*/[0-9][0-9]' | grep -v 'IL4RT' | grep -v '^<<TEST>>' | grep -v 'ignore line for regression testing' | ${IVI_SED} '/^db..*: .* on source line /d' > ${test_output_file}.FILTERED_FOR_DIFF.TMP

                if (-e "${test_output_file}.FILTERED_FOR_DIFF") then 
                    ${IVI_DIFF_TEST} "${test_output_file}.FILTERED_FOR_DIFF.TMP" "${test_output_file}.FILTERED_FOR_DIFF"
                    if (${status}) then 

                        if (-e "${run_dir}/output_checked") then 
                            echo "New ${test_output_file}.FILTERED_FOR_DIFF will be different, but output_checked exists."
                            echo "Removing output_checked to invalidate test. Intervention might be required."
                            ${IVI_RM} "${run_dir}/output_checked"
                        else 
                            echo "Updating ${test_output_file}.FILTERED_FOR_DIFF as it is different from before."
                        endif 
                        
                        ${IVI_RM} "${test_output_file}.FILTERED_FOR_DIFF"
                        ${IVI_MV} "${test_output_file}.FILTERED_FOR_DIFF.TMP" "${test_output_file}.FILTERED_FOR_DIFF"
                    else 
                        ${IVI_RM} "${test_output_file}.FILTERED_FOR_DIFF.TMP"
                    endif 
                else 
                    ${IVI_MV} "${test_output_file}.FILTERED_FOR_DIFF.TMP" "${test_output_file}.FILTERED_FOR_DIFF"
                endif 
            endif 
        end 

        if (! -e "run_succeeded"}) then 
            ${IVI_TOUCH} run_succeeded 
        endif 

        # Cleanup 
        # This relies on svn propogating time stamps, which it does not do. We
        # could get fancier, but perhaps nothing is really gained. Our protocal
        # right now is simple: If output_checked exists, the files are valid. 
#         foreach f (*)
#             if ("$f" == "test_time_stamp") continue
#             if ("$f" == "output_checked") continue
#             if ("$f" == ".gitkeep") continue
#             set f_is_old = `${MAKE_SCRIPT_PATH}test_older_than "$f" output_checked`
#             if (${f_is_old}) then 
#                 "Script test_program_2 is cleaning up $f in `pwd`" 
#                 echo ${MAKE_SCRIPT_PATH}ivi_svn_rm "$f"
#                 ${MAKE_SCRIPT_PATH}ivi_svn_rm "$f"
#             endif 
#         end
    else if ("${test_type}" == "regress") then
        set run_dir_files = `${IVI_LS} | grep -v '^FAILED$'  | grep -v '.FILTERED_FOR_DIFF$' | grep -v '.TMP$' | grep -v '\.res$'| grep -v 'regression_test_passed' | grep -v 'valgrind_log_file' | grep -v '^ARGS$'  | grep -v '^ENV$' | grep -v '^STDIN$' `

        ${VERBOSE_ECHO} "Regress run_dir_files: $run_dir_files"

        # We assume we have stripped out all files that do not need to be
        # compared, and currently the only one that we do not need to filter
        # before doing the diff is RC. However, we could do RC also (no harm),
        # but perhaps more confusing.

        foreach output_file (${run_dir_files}) 
            if ("${output_file}" != "RC") then 
                ${VERBOSE_ECHO} "Filtering ${output_file} in ${cwd}"
                grep < ${output_file} -v 'ignore for test' | grep -v '/tmp/*[^/]*/[0-9][0-9]' | grep -v 'IL4RT' |  grep -v '^<<TEST>>' | grep -v 'ignore line for regression testing' | ${IVI_SED} '/^db..*: .* on source line /d' > ${output_file}.FILTERED_FOR_DIFF
                set output_file = "${output_file}.FILTERED_FOR_DIFF"
            endif 

            set test_output_file = "${test_run_dir}/${output_file}"
            
            if (-e ${test_output_file}) then
                ${IVI_DIFF_TEST} ${output_file} ${test_output_file} > /dev/null

                if ($status) then 
                    echo " "
                    echo "${program} failed regression testing with input ${input_dir}."
                    echo "There is a difference with respect to ${output_file} "
                    echo " "
#                     echo "Reproduce with: "
#                     echo "    ${IVI_DIFF_TEST} `pwd`/${output_file} ${test_output_file}"
#                     echo " "
                    echo "Check with: "
                    echo "    vimdiff  `pwd`/${output_file} ${test_output_file}"
                    echo " "
                    echo "If the current result is correct, then the test output will need to be rebuilt."
                    set test_result = "FAILED (diff)"
                    set test_rc = 1
                endif
            else
               echo " "
               echo "File `pwd`/${output_file} exists but ${test_output_file} does not."
               echo "This is likely a cleanup issue."
               set test_result = "FAILED (extra output file (${output_file}))"
               set test_rc = 1
            endif
        end

        foreach output_file (${test_run_dir_files}) 
            set test_output_file = "${test_run_dir}/${output_file}"
            if ( ! -e ${output_file}) then
               echo " "
               echo "File ${test_output_file} exists but `pwd`/${output_file} does not."
               echo "This is likely a cleanup issue."
               set test_result = "FAILED (missing output file (${output_file}))"
               set test_rc = 1
            endif
        end

        if ( ! ${test_rc}) then 
            ${IVI_TOUCH} regression_test_passed 
        endif 
    else
        echo "Script 'test_program_2' reaching unexpected code line around line 749."
    endif 
endif 

if (${test_rc}) then
    # Do nothing
else if ("${test_type}" == "regress") then
    # Do nothing
else if (-e "output_checked") then
    ${IVI_RM} FAILED
    
    if (${src_is_under_svn}) then
        svn info . >& /dev/null

        if (${status}) then
            set svn_command = "svn add --parents --depth=empty `pwd`"

            # Should be the case if test_type is "svn". It could also be
            # the case for "check", but not necessarily. 
            #
            if (${add_test_to_svn}) then
                ${MAKE_SCRIPT_PATH}ivi_lock 30 ${svn_command}
                set svn_cmd_status = ${status} 

                if (${svn_cmd_status}) then
                    set test_result = "FAILED (svn mkdir issue)." 
                    set test_rc = 0
                    goto finish_up
                endif 
            else 
                echo " "
                echo "Because ${src_code} is under SVN consider entering: "
                echo "    ${svn_command}"
                echo "(or use 'make test_svn')."
                echo " "
            endif 
        endif 

        # We do not put run_succeeded in the repo to force rerunning of the test
        # on a new platform. But, as long as the output is correct, then we
        # respect output_checked. 
        set files = `${IVI_LS} | grep -v '.TMP$' | grep -v '\.res$' | grep -v run_succeeded  | grep -v 'valgrind_log_file' | grep -v 'test_time_stamp' | grep -v 'STDIN' `

        set not_in_svn = ""
        foreach file (${files}) 
            # If there is a filtered version, then skip non filtered version.
            if (-e "${file}.FILTERED_FOR_DIFF") continue
            svn info "${file}" >& /dev/null
            if (${status}) set not_in_svn = "${not_in_svn} ${file}"
        end 

        if ("${not_in_svn}" != "") then
            set svn_command = "svn add ${not_in_svn}"

            if ($add_test_to_svn) then 
                ${MAKE_SCRIPT_PATH}ivi_lock 30 ${svn_command}
                set svn_cmd_status = ${status} 

                if (${svn_cmd_status}) then
                    set test_result = "FAILED (svn add issue)." 
                    set test_rc = 0
                    goto finish_up
                endif 
            else if (! ${test_quietly} ) then 
                echo " "
                echo "Because ${src_code} is under SVN consider entering: "
                echo "    cd `pwd`"
                echo "    ${svn_command}"
                echo "(or use 'make test_svn')."
                echo " "
            endif 
        endif 
    endif
endif 

finish_up: 

set end_time = `${IVI_ECHO_TIME}`

# if ("${valgrind_log_file}" != "") then 
#   ${IVI_RM} valgrind_log_file
# endif 

echo "${test_description} for ${program} with input ${input_dir} ${test_result}"

if (${valgrind_error}) then
    if (! ${test_quietly} ) then 
        echo " "
        echo "Enter the following for more information"
        echo "     vim `pwd`/valgrind_log_file"
        echo " "
    endif 
else if (("${test_type}" != "check") && ("${test_type}" != "svn")) then
    if (("${RC}" != "0") && ("${test_result}" == "succeeded")) then
        echo " "
        echo "Note that the return code was nonzero ($RC)"
        echo "This only makes sense if we are testing handling bad input, etc."
        echo ""
    endif 
endif 

if (! ${test_quietly} ) then 
    echo " "
    echo "Time span: ${start_time} to ${end_time}"
endif 

end_of_script:

if (! ${test_quietly}) then 
    echo " "
    echo "Finished script test_program_2 run in ${cwd} with status ${test_rc}"
    echo "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ "
    echo "=========================================================================="
    echo " "
endif 

exit ${test_rc}



