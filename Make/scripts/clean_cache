#!/bin/tcsh -f

# $Id: clean_cache 25718 2020-08-12 17:50:08Z kobus $

# Synch some boostrapping with init_compile.

if (! $?IVI_SRC_PATH) then 
   bash -c 'echo "Script clean_cache assumes IVI_SRC_PATH is set." 1>&2'
   exit 1
else if (! -d "${IVI_SRC_PATH}") then 
   bash -c 'echo "Script clean_cache assumes IVI_SRC_PATH constains a valid directory." 1>&2'
   exit 1
endif 

if ($?IVI_HAVE_INIT_SCRIPTS) then
    # Do not use VERBOSE_ECHO_2 as we may not have it yet. 
    if ($?IVI_VERBOSE_2) then
        echo "VB2: Script clean_cache is not sourcing ${IVI_SRC_PATH}Make/init_scripts because IVI_HAVE_INIT_SCRIPTS is set."
    endif 
else 
    # Do not use VERBOSE_ECHO as we may not have it yet. 
    if ($?IVI_VERBOSE) then
        echo "IVB: Script clean_cache is sourcing ${IVI_SRC_PATH}Make/init_scripts."
    endif 

    source ${IVI_SRC_PATH}/Make/init_scripts

    if ($status) then
        if ($?IVI_VERBOSE) then
            echo "IVB: Script clean_cache is exiting due to init_scripts failure."
        endif 
        exit 1
    endif 
endif 

${IVI_RM} "${IVI_LOCKFILE_PATH}"

# Kobus: Summer 2020. Andrew Predoehl had some code here that dealt with the
# issue that at some point IVI_RM (then KJB_RM) was stored in the cache. This is
# no longer true, but leaving the code as is does no harm. 

# sorry windows users
set default_rm="rm -r -f"

if( ! $?IVI_RM) then
    set rm="${default_rm}"
else
    set rm="$IVI_RM"
endif

set cache_dir = "${USER_TEMP_PATH}"

if( ! -w $cache_dir) then
    echo 'Error: writable cache directory not found. No caches were cleaned.'
    exit
endif

set cache_dir="${cache_dir}/${USER}"

if (-d "${cache_dir}") then 
    set cache_prefixes='kjb_env kjb_var ivi_env ivi_var'
    set cache_lock_file = "${cache_dir}/cache_lock"
    set found_files_to_delete = 0 

    foreach cache_prefix (${cache_prefixes})
        set noglob
        set have_file_to_delete = `find -L "${cache_dir}" -name "${cache_prefix}*"  | grep -c "${cache_prefix}*" `
        unset noglob

        # The find could do the delete, but keep the following longer way
        # for now.
        #
        if (${have_file_to_delete}) then
            set found_files_to_delete = 1
            echo "Deleting all files in ${cache_dir} with prefix ${cache_prefix}."

            foreach cachefile (${cache_dir}/${cache_prefix}*)
                ${rm} ${cachefile}
                # Paranoia
                if (-e "${cachefile}") then
                    echo "Removal command ${rm} did not work!  Trying ${default_rm}."
                    ${default_rm} ${cachefile}
                    if ( -e ${cachefile} ) then
                        ${P_STDERR} "Panic: unable to remove cache file ${cachefile}."
                        ${P_STDERR} "Please remove it manually."
                        exit 1
                    endif
                endif
            end
        endif 
    end 

    if (-e "${cache_lock_file}") then
        set found_files_to_delete = 1
        echo "Deleting the cache lockfile."

        ${rm} ${cache_lock_file}
        # Paranoia
        if ( -e ${cache_lock_file} ) then
            echo "Removal command ${rm} did not work!  Trying ${default_rm}."
            ${default_rm} ${cache_lock_file}
            if ( -e ${cache_lock_file} ) then
                ${P_STDERR} "Panic: unable to remove cache file ${cachefile}."
                ${P_STDERR} "Please remove it manually."
                exit 1
            endif
        endif
    endif 

    if (! ${found_files_to_delete}) then 
       echo "No files in the cache to delete."  
    endif 
endif 

# Do it again, in case some code above set any locks (it should not).
${IVI_RM} "${IVI_LOCKFILE_PATH}"

