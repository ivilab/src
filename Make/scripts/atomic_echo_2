#!/bin/tcsh -f 

# The name of this script is misleading. This does not (yet) implement an atomic
# write, at least on some systems. It is a place holder for such a facility.
#
# This intermediate script allows some control on the output of blocking file
# clobbering.

if ($# != 2) then
    ${P_STDERR} "Script atomic_echo_2 needs exactly two arguments. Called with: $*"
    exit 1
endif 

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Entering atomic_echo_2 $*"

set lock_file = "$1"
set id = "$2"

if ((! $?FORCE_NO_FLOCK) && ("${IVI_FLOCK}" != "")) then
    # Must have a value, as we are setting up for bash.
    setenv USE_IVI_FLOCK 1
endif 

# Don't try to filter output. Something like the followg does NOT work on
# all systems. I am not sure why!
#
# ${MAKE_SCRIPT_PATH}atomic_echo_3 |& ${IVI_SED} '/\.lock: File exists/d'

# For debugging, get the output.
${MAKE_SCRIPT_PATH}atomic_echo_3 "${lock_file}" "${id}"
# ${MAKE_SCRIPT_PATH}atomic_echo_3 "${lock_file}" "${id}" >& /dev/null

if (${status}) then
    ${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Handler for ${id} unable to overwrite lockfile with contents: `cat ${lock_file}`"
    exit 1
endif 

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Handler for ${id} TENTATIVELY set lock file contents to: `cat ${lock_file}`"

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Leaving atomic_echo_2 $*"

