#!/bin/tcsh -f 

##############################################################################
#
# Identification:
#     Removes the semaphore that blocks cooperating processes from proceeding 
#
# Description:
#     This is the script of a pair for locking blocks of script code that is not
#     conveniently expressed as a command (otherwise use ivi_lock). It works
#     much as lockfile-remove, and in fact, is implemented using lockfile-remove
#     if it is available. The main justification for this script is that locking
#     is not universally available. Most notably good locking facilities are not
#     available in the mac OS. Hence, this script also implements a fall back
#     method that is less than ideal, but usually works. 
#
#     The argument to ivi_lock_remove needs to be the same as for the proceeding
#     call to lockfile-create (excluding its first argument). 
#
#     I might have called this script ivi_lock_destroy, but since it is similar
#     to lockfile-remove, I have gone with ivi_lock_remove. 
#
# Author:
#     Kobus Barnard 
#
##############################################################################

# We assume that init_scripts has been called as this script is largely used as
# part of the IVI build system reflected by the fact that it lives in Make.
# Thus, we have P_STDERR, VERBOSE_ECHO, and MAKE_SCRIPT_PATH. 

# This script must be kept in sync with ivi_lock_create
#
# set echo

if ($# < 1) then
    ${P_STDERR} "Script ivi_lock_remove needs at least one argument."
    exit 1
else if ($# < 2) then
    set requesting_pid = `ps -p $$ -o ppid=`
else 
    set requesting_pid = $2 
endif 

set lock_label = "$1"

set exit_status = 0

if ($?IVI_DONT_LOCK) then
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}IVI_DONT_LOCK is set, so ivi_lock_remove is not doing anything"
    exit 0
endif

set locking_method = ""

if ($?IVI_LOCKING_METHOD) then
    set  locking_method = "${IVI_LOCKING_METHOD}" 
    if ((${locking_method} != "lockfile-progs") && (${locking_method} != "ivi")) then
        echo "IVI_LOCKING_METHOD is set, but not to a viable locking method for ivi_lock_remove. Ignoring it."
    endif 
endif 

if ("${locking_method}" == "") then
    #
    #   Disable until we can sort out wait time.
    #
    #   else if  ("${IVI_LOCKFILE_CREATE}" != "") then
    #       set locking_method = "lockfile-progs"
    # else
        set locking_method = "ivi"
    # endif 
endif 

if (! $?IVI_LOCKFILE_DIR) then
    setenv IVI_LOCKFILE_DIR ${TMPDIR}/${USER}/lockfiles/
endif 

set dir_str = `echo ${cwd} | sed 's#.*/##'`

source ${MAKE_SCRIPT_PATH}set_lockfile_name

onintr bail

${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock_remove process $$ running ivi_lock_remove ${lock_label}"
${VERBOSE_ECHO} "${VERBOSE_INDENT}    in `pwd` using lockfile '${lock_file}'"

if ("${locking_method}" == "lockfile-progs") then
    ${VERBOSE_ECHO} "Process $$ running ivi_lock_remove ${lock_label} in `pwd` using lockfile-progs"

    lockfile-remove --lock-name argument ${lock_file}

    if (! ${status}) then
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ successfully removed ${lock_file} in `pwd` using lockfile-remove."
    endif
else 
    # IVI locking method. Doing locking robustly in scripts is hard, but
    # often (e.g., mac) we do not have a good solution. The following is better
    # than nothing.

    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ running ivi_lock_remove ${lock_label} in `pwd` using IVI locking system."

    if (-e "${lock_file}") then
        #  I have not found a safe way to ignore error output. 
        set lock_proc = `cat ${lock_file}`

        if (${status}) then
            echo "Script ivi_lock_remove reports lock file ${lock_file} to be removed just got removed."
        else if (${lock_proc} != ${requesting_pid}) then 
            echo "Script ivi_lock_remove not removing lock file ${lock_file} for process ${requesting_pid} as it belongs to ${lock_proc}."
        else 
            ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ removing lock file ${lock_file}."
            echo ${IVI_RM} ${lock_file}
            ${IVI_RM} ${lock_file}
            if (${status}) then
                ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ failed to remove lock file ${lock_file}."
                exit ${status}
            endif 
        endif 
    else 
        ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ reports lock file to remove (${lock_file}) does not exist."
    end

    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ successfully ran ivi_lock_remove ${lock_label} in `pwd` using IVI locking method."
endif 

cleanup: 
    
exit ${exit_status}

# We should not be here unless onintr

bail:

if (-e "${lock_file}") then 
    echo "Script ivi_lock_remove process $$ removing lock file ${lock_file} because of interrupt."
    echo " "
    ${IVI_RM} "${lock_file}"
endif 

exit 1


   
