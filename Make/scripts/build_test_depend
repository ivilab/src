#!/bin/tcsh -f

# set echo 

echo " "
echo "#################################################################"
echo "#            Targets and rules for testing  "
echo " "

set num_tests = 0
set programs = ()
set tests = ()

set test_instance_line = "$<"
while ("${test_instance_line}" != "") 
    eval 'set test_instance_parsed = (${test_instance_line})'
    set program = ${test_instance_parsed}[1]
    set test_instance = ${test_instance_parsed}{2]


    set progs = (${programs} ${program})
    set tests = (${tests} ${test_instance})
    @ num_tests += 1

    set test_instance_line = "$<"
end

echo ""
echo ""
echo "TEST_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)/output_checked \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)/output_checked'
echo 

echo 
echo "TEST_SVN_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)/svn_phony \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)/svn_phony'
echo 

echo "REGRESS_TARGETS = \"

set count = 1

while (${count} < ${num_tests})
    echo "    test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed \'
    @ count += 1
end

# One more, without the backslash.
echo "    test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'
echo 

set count = 1

while (${count} <= ${num_tests})
    if (("$tests[$count]" != "NULL") && (-d "test_input/$progs[$count]/$tests[$count]")) then
        # pwd > /dev/stderr
        set files = `find test_input/$progs[$count]/$tests[$count] -mindepth 1 -maxdepth 1 -type f \! \( -name '.*' \) `
    else 
        set files = ""
    endif
    
    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/output_checked : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"
    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/output_checked : ${files} test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/run_succeeded"
    echo '	$(ECHO_IF_VERBOSE) Building $@ because of $?'
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -c $progs[$count] $tests[$count] "
    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/run_succeeded : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"

    echo ""

    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/run_succeeded : ${files}"
    echo '	$(ECHO_IF_VERBOSE) Building $@ because of $?'
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -t $progs[$count] $tests[$count] "
    echo ""


    echo "test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'" : "'$(MAKE_SCRIPT_PATH)'"test_program "'$(MAKE_SCRIPT_PATH)'"test_program_2"

    echo ""

    # We put the dependency on code first because the depency on test
    # implicitly relies on the code being there. If we do 'make test' then
    # build-2 does the make, but not if we do 'make regress'
    echo "test_runs/$progs[$count]/$tests[$count]/regress/"'$(LD_OBJ_DIR)regression_test_passed'" : ${files} "'$(LD_OBJ_DIR)'"$progs[$count] test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/output_checked "
    echo '	$(ECHO_IF_VERBOSE) Building $@ because of $?'
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -r $progs[$count] $tests[$count]  "
    echo ""

    echo ".PHONY : test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/svn_phony"
    echo "test_runs/$progs[$count]/$tests[$count]/test/"'$(TEST_CODE_TYPE)'"/svn_phony :"
    echo '	$(ECHO_IF_VERBOSE) Building $@ because of $?'
    echo '	$(MAKE_SCRIPT_PATH)test_program'" -s $progs[$count] $tests[$count] "
    echo ""

    @ count += 1
end

echo " "
echo " "
echo "#################################################################"
echo " "




