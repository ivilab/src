#!/bin/tcsh -f 

##############################################################################
#
# Identification:
#     A script to execute commands so that only one instance is run at a time. 
#
# Synopsis:
#     ivi_lock {max_time} {cmd} [args]
#
# Description:
#     This is a simple script for locking. It trades limited capability for
#     simplicity (see deficiencies below). The main justification for this
#     script is that locking is not universally available. Most notably good
#     locking facilities are not available in the mac OS. To get portability, we
#     implement a lock_create and a lock_remove, using locking facilities that
#     are available depending on environment variables. This script wraps the
#     command to be run inside the create remove pair.
#
#     The first argument to ivi_lock is the max number of seconds to wait. This
#     has to be first because the command can have an arbitrary number of
#     arguments.
#
#     The second argument to ivi_lock is the command to be executed including
#     its arguments. This script supports simple locking through a lockfile
#     whose name is derived in one of two ways.  One is based on the command and
#     last element of the current path, and the other is based on a resource
#     labeled by the value of the environment variable IVI_LOCKFILE_NAME. 
#
#     For command based locking (simplest), this script constructs a lock name
#     based on the command and a piece of the current directory.  This makes
#     sense if the command is the only way that particular files get modified
#     and/or might do a sequence of steps that all need to be protected, and/or
#     actions needing protection are not described as modifying an obvious
#     resource (e.g., updating an SVN repo).
#
#     However, command based locking does not support multiple copies of the
#     same script running in the same directory that share a resource that needs
#     to be protected. For this scenario, the set of scripts can set a specific
#     named lock via the environment variable IVI_LOCKFILE_NAME. Usually this is
#     an informative string (no slashes are allowed). However, if
#     IVI_LOCKFILE_NAME holds a path, then that path is taken as the precise
#     lockfile, and the behaviour is similar to "flock", especially if flock is
#     the underlying implementation.
#
#     If the environment variable IVI_LOCKFILE_PATH is set, this script will use
#     its value as a directory to create lockfiles in. Otherwise, this script
#     will use ${TMPDIR}/${USER}/lockfiles/, creating it if needed.
#
#     If the environment variable IVI_DONT_LOCK is set, then this script runs
#     the argument without any locking. The main purpose of this is to avoid
#     deadlock when we effectively call scripts recursively. Normally there is a
#     better way to accomplish what you want to do, but one instance where such
#     a way is yet to be discovered is in repository synchronization where we
#     want 'to' and 'from' processes to share locks, but also call each other.
#
#     This script checks for possible deadlock and does not lock if it thinks
#     this could happen. Further if the environment variable EXIT_ON_DEADLOCK is
#     set, then we exit with error status in this situation (good for
#     debugging).
#
#     Finally, this script relies on ivi_lock_create for handling timing out. If
#     the timeout is exceeded, then we ignore the lock. However, if the
#     environment variable EXIT_ON_TIMEOUT is set, we will exit with error
#     status.
#
# See also
#      The script ivi_lock_for_make combines locking with not executing the
#      command if the target was build by the process we were waiting on, or if
#      it is newer than a file touched in build-2. Scripts ivi_lock_create and
#      ivi_lock_remove can be used in other ways, and their documentation
#      provides additional information about the locking system, including
#      environment variables that manipulate it.
#  
# Deficiencies
#     The current implementation locks all runs of a command operating in a
#     given sub-directory, irrespective of arguments or parent directory, which
#     is is not a big issue as it is simply overly conservative. If this becomes
#     an issue, we can put more path components in the lockfile name. 
#
#     If IVI_LOCKFILE_NAME looks like a path, we do not add ".lock" to the name,
#     but if it is a simple string without '/', then we do add '.lock'. This
#     behavior might confuse some (and is easy to change), but the reasoning is
#     that one should be able to have full control if needed, by specifying the
#     full path, and we arbitrarily keep that same behavior for relative paths,
#     as the path is now relative to where you are running things, not the
#     IVI_LOCKFILE_PATH (which might also confuse). This scenario seems
#     unlikely.
#
#     See ivi_lock_create for more deficiencies related to reliable locking.
#
# Author:
#     Kobus Barnard 
#
##############################################################################

# We assume that init_scripts has been called as this script is largely used as
# part of the IVI build system reflected by the fact that it lives in Make.
# Thus, we have P_STDERR, VERBOSE_ECHO, and MAKE_SCRIPT_PATH. 

if ($?IVI_SET_ECHO) then
    set echo
endif 

if ($# < 2) then
    ${P_STDERR} "Script ivi_lock needs at least two arguments."
    exit 1
endif 

# Don't really need to error check as ivi_lock_create does it, but this might
# help get to the source faster.
#
set max_time_to_wait = "$1"

if ("${max_time_to_wait}" == "") then
    ${P_STDERR} "Script ivi_lock received a null first argument."
    exit 1 
endif 

set check_time_arg = `echo "${max_time_to_wait}" | sed 's/[0-9]//g'`
if ("${check_time_arg}" != "") then
    ${P_STDERR} "Script ivi_lock first arg (${max_time_to_wait} must be a non-negative integer."
    exit 1 
endif 

set full_cmd = "$argv[2-$#]"

if ($?IVI_DONT_LOCK) then
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}IVI_DONT_LOCK is set, so ivi_lock is not locking: $*"
    ${full_cmd} 
    exit ${status}
endif

${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock process $$ in ${cwd} with args $*."

set cmd_str = `echo ${2} | ${IVI_SED} 's#.*/##'`

set lock_label = ""
foreach cmd_part (${full_cmd})
    set cmd_part_no_path = `echo "${cmd_part}" | ${IVI_SED} 's#//*$##' | ${IVI_SED} 's#.*/##' `

    if ("${cmd_part_no_path}" == "") then
        set cmd_part_no_path = "NULL"
    else 
        set cmd_part_no_path = `echo ${cmd_part_no_path} | sed 's/^[1-9][0-9]*$//'`
        if ("${cmd_part_no_path}" == "") then
            set cmd_part_no_path = "NUMBER"
            ${VERBOSE_ECHO} "${VERBOSE_INDENT}Positive integer argument ${cmd_part} is ignored by ivi_lock as it is too likely to be spuriously unique."
        endif 
    endif 

    if ("${lock_label}" == "") then
        set lock_label = "${cmd_part_no_path}"
    else
        set lock_label = "${lock_label}_${cmd_part_no_path}"
    endif 
end

set dir_str = `echo ${cwd} | ${IVI_SED} "s#${HOME}/##" | ${IVI_SED} 's#^/##g' | ${IVI_SED} 's#/#_#g'`
set lock_label = "${lock_label}_${dir_str}"

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Script ivi_lock setting lock_label to ${lock_label}."

# This bit of shared code sets "safe_to_lock" and requires "lock_label".
source ${MAKE_SCRIPT_PATH}check_for_deadlock
if (${status}) exit ${status} 

set exit_status = 0

onintr ivi_lock_bail

${VERBOSE_ECHO_2} "${VERBOSE_INDENT}Process $$ running ${cmd_str} in `pwd` using IVI locking system."

set requesting_pid = `ps -p $$ -o ppid=`

if (${safe_to_lock}) then
    ${MAKE_SCRIPT_PATH}ivi_lock_create ${max_time_to_wait} ${lock_label} ${requesting_pid}
    if ($status) then 
        ${P_STDERR} "Call to ivi_lock_create from ivi_lock failed."
        set exit_status = 1
    endif 
else 
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock skipping call to ivi_lock_create as it is not safe to lock."
endif  

if (! ${exit_status}) then
    ${VERBOSE_ECHO_2}  "${VERBOSE_INDENT}Process $$ executing ${full_cmd}"
    ${full_cmd} 
    set exit_status = $status 
    ${VERBOSE_ECHO_2}  "${VERBOSE_INDENT}Executing ${full_cmd} had exit status ${exit_status}."
endif 

if (${safe_to_lock}) then
    ${MAKE_SCRIPT_PATH}ivi_lock_remove ${lock_label} ${requesting_pid}
else 
    ${VERBOSE_ECHO} "${VERBOSE_INDENT}Script ivi_lock skipping call to ivi_lock_remove as it is not safe to lock."
endif  

if (! ${exit_status}) then 
    ${VERBOSE_ECHO_2}  "${VERBOSE_INDENT}Process $$ successfully ran ${cmd_str} in ${cwd}."
endif 
    
${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ finishing ivi_lock $* with status ${exit_status}."

cleanup: 

exit ${exit_status}

# We should not be here unless onintr

ivi_lock_bail:

${VERBOSE_ECHO} "${VERBOSE_INDENT}Process $$ doing ivi_lock got an interrupt."

# If we are not locking or even if we are, then the lock_file variable might not
# be set when we got interrupted.

if (${safe_to_lock}) then
    if (${?lock_file}) then 
        if (-e "${lock_file}") then 
            ${P_STDERR} "Script ivi_lock process $$ removing lock file ${lock_file} because of interrupt."
            ${P_STDERR} " "
            ${IVI_RM} "${lock_file}"
        endif 
    endif 
endif 

exit 1


   
