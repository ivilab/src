#!/bin/tcsh -f

# set echo 

if ($?IVI_LIB_PATH == 0) then
    if ($?IVI_SRC_PATH == 0) then
        ${P_STDERR} "Script do_ctags assumes that either IVI_LIB_PATH or IVI_SRC_PATH is set."
        exit 1
    else 
        pushd ${IVI_SRC_PATH} > /dev/null
            setenv IVI_LIB_PATH ${cwd}/lib/
        popd > /dev/null 
    endif 
endif 

@ num_args = ${#argv}

if ("${num_args}" > 1) then
    ${P_STDERR} "Script do_ctags takes only 0 or 1 parameters."
    exit 1 
else if ("${num_args}" == 1) then
    if ("${1}" != "") then
        pushd "${1}" > /dev/null
    endif 
endif 

# No '-h' here, as we get them from tags_h and we typically want to
# search the code ones first. 
#
${MAKE_SCRIPT_PATH}stream_file_names -s > tag_files
if (${status}) exit 1 

if (-e Include_lines/sub_libs_needed) then
    set sub_libs_needed = `/bin/cat Include_lines/sub_libs_needed`

    foreach sub_lib_needed ($sub_libs_needed)
        # No '-h' here, as we get them from tags_h and we typically want to
        # search the code ones first. 

        if (-d ${IVI_LIB_PATH}/${sub_lib_needed}) then
            # ${IVI_LS} -1 ${IVI_LIB_PATH}/${sub_lib_needed}/*.[ch]  |& grep -v "No match"  >> tag_files
            ${MAKE_SCRIPT_PATH}stream_file_names -s ${IVI_LIB_PATH}/${sub_lib_needed} >> tag_files
            if (${status}) exit 1 
        else if (-d lib/${sub_lib_needed}) then
            # ${IVI_LS} -1 lib/${sub_lib_needed}/*.[ch]  |& grep -v "No match"  >> tag_files
            ${MAKE_SCRIPT_PATH}stream_file_names -s lib/${sub_lib_needed} >> tag_files
            if (${status}) exit 1 
        else if (-d ../../lib/${sub_lib_needed}) then
            # ${IVI_LS} -1 ../../lib/${sub_lib_needed}/*.[ch]  |& grep -v "No match"  >> tag_files
            ${MAKE_SCRIPT_PATH}stream_file_names -s ../../lib/${sub_lib_needed} >> tag_files
            if (${status}) exit 1 
        endif
    end
endif 

set exit_status = 0

${IVI_CAT} /dev/null > tags
if (${status}) then 
    set exit_status = 1
else 
    #
    # In current exhuberant ctags, sort=yes is the default. GNU ctags chokes on
    # it. Hence we no longer use it. However, GNU ctags also chokes on -L, which
    # we do not have a convenient work around for.
    #
    # ctags --sort=yes -a -L tag_files -o tags
    # ctags -a -L tag_files -o tags
    # Testing new ctags c++ support (probably these new flags won't work with GNU ctags, either)
    ${IVI_CTAGS} -a -L tag_files --c++-kinds=+p --fields=+iaS --extra=+q -o tags
    if (${status}) then
        echo "ctags failed making tag file 'tags' in script do_ctags."
        echo "Possibly ctags on this machine is an old flavor that we don't care about."
        set exit_status = 1
    endif 
endif 

# This is not doing so well. On hold for now. 
#
# if (-e Include_lines/header_tag_files) then
#     pushd Include_lines > /dev/null
#         ${IVI_MKDIR} header_files_pp_dir 
#         ${IVI_CAT} /dev/null > header_pp_tag_files
#         ${IVI_CAT} header_tag_files | do_ctags_pp header_files_pp_dir header_pp_tag_files
#     popd > /dev/null 
# endif 

if (-e Include_lines/header_tag_files) then
    set echo 
    ${IVI_CTAGS} -a -L Include_lines/header_tag_files --c++-kinds=+p --fields=+iaS --extra=+q -I ${MAKE_PATH}/ctags/identifier_hacks.txt -o tags_h
    unset echo 
    if (${status}) then
        echo "ctags failed making tag file 'all_tags' in script do_ctags."
        echo "Possibly ctags on this machine is an old flavor that we don't care about."
        set exit_status = 1
    endif 
endif 

${IVI_RM} tag_files 

exit ${exit_status}


