#!/bin/tcsh -f

# $Id: build_with_configure 25783 2020-09-12 23:55:45Z kobus $
#
# This is the vision lab build script hacked for shared code that has non-broken
# fairly standard "configure" scripts. 
#
# This script lives in src/Make/. It is best to copy this script. IE, treat it
# as a tempate. 
#
# This script is not called from any Makefiles. It needs to be executed as a
# standalone (i.e., by typing in ./<whatever_you_named_it). Names include
# "build", or if there is a build directory, then perhaps leaving the name as is
# is best. 
#
##################################################################################
#
# Build script 
# ============
#
# This file is generally called by "make". It can also be called directly. The
# main purpose is to normalize the make environment, and to implement some
# functionality that is difficult to do in a robust portable way for all flavors
# of make. 
#
##################################################################################

# This next part is shared by all files in Make whose names begin with "build",
# AND scripts ivi_add_makefiles, create_library, create_program, and
# update_ivi_core. Updates should be propogated. 

# We want to use a pure "cd".
unalias cd
    
if ($?FORCE_IVI_SRC_DIR) then 
    if (-e "${FORCE_IVI_SRC_DIR}/Make/init_compile") then 
        setenv IVI_SRC_PATH "${FORCE_IVI_SRC_DIR}"
    else 
        bash -c 'echo "Env var FORCE_IVI_SRC_DIR is set to ${FORCE_IVI_SRC_DIR}, but ${FORCE_IVI_SRC_DIR}/Make/init_compile does not exist." >&2'
        exit 1 
    endif 
else  
    # Use env var for IVI_DIRS for better error reporting via bash sub-shell.
    if ($?FORCE_IVI_DIR) then
        setenv IVI_DIRS "${FORCE_IVI_DIR}"
    else
        setenv IVI_DIRS ". kjb KJB ivi IVI src"
    endif 

    # Find out where we are in the source tree. In particular, we want to find a
    # directory that has one of the directories in IVI_DIRS as a subdir, which
    # itself has Make as a sub-dir and Make/init_compile as a file in that. 

    # We want to block going above the user's home directory because it might cause
    # a mount request that we don't want. If we are not below their home, then it is
    # fine to ga to the root. 
    #
    pushd ${HOME} >& /dev/null
    set home_pwd = `pwd`
    popd >& /dev/null

    set found = 0
    set ivi_top = ""

    pushd `pwd` > /dev/null

    while (("`pwd`" != "/") && ("`pwd`" != "${home_pwd}")) 
        foreach ivi_dir (${IVI_DIRS}) 
            if ("${ivi_dir}" == ".") then
                set ivi_dir = ""
            else
                set ivi_dir = "${ivi_dir}/"
            endif 

            if (-e "${ivi_dir}Make/init_compile") then
                set found = 1
                break
            endif 
        end

        if (${found}) break

        set ivi_top = "../${ivi_top}"
        cd ..
    end

    popd > /dev/null

    if (${found}) then
        if ("${ivi_dir}" == "") then
            set ivi_dir = "./"
        endif 

        setenv IVI_SRC_PATH "${ivi_top}${ivi_dir}"
    else 
        setenv THIS_PROGRAM "$0" 

        # We cannot use P_STDERR here because we might not have defined it yet.
        bash -c 'echo " " >&2'
        bash -c 'echo "This directory is not below a directory with IVI installed." >&2'
        bash -c 'echo "Valid directories for IVI in this context: ${IVI_DIRS}." >&2'
        bash -c 'echo "To experiment with a temporary fix, try setting FORCE_IVI_SRC_DIR." >&2'
        bash -c 'echo "For a more permanent fix, edit this program: " >&2'
        bash -c 'echo "    ${THIS_PROGRAM} " >&2'
        bash -c 'echo "or contact Kobus." >&2'
        bash -c 'echo " " >&2'

        exit 1
    endif 
endif 

pushd ${IVI_SRC_PATH} > /dev/null
    setenv IVI_SRC_PATH "${cwd}/"
popd > /dev/null

###############################################################################

# Check that this file ($0) is up to date compared to the reference one.
set need_to_replace_myself = `${IVI_SRC_PATH}Make/scripts/test_older_than "$0" "${IVI_SRC_PATH}Make/build"`
     
if (${need_to_replace_myself}) then
    # We could make this even more automated using the defunct script
    # self_update, but this is too fancy. It cannot do the rebuild in parallel,
    # and we would want to implement checking for infinite recursion.  Using
    # self_update is commented out here:
    #     exec ${IVI_SRC_PATH}Make/scripts/self_update "$0" "${IVI_SRC_PATH}Make/build" Make

    echo "Script $0 is attempting to rebuild itself."
    echo "You will need to reenter your build command (e.g., make or $0)."
    exec /bin/cp "${IVI_SRC_PATH}Make/build" "$0"
endif 

##############################################################################

setenv ONLY_GET_BUILD_ENV
source ${IVI_SRC_PATH}Make/scripts/build-2 

##############################################################################

if ($?IVI_CPATH) then 
    setenv CPATH "${IVI_CPATH}"
endif 
   
if ($?IVI_LIBRARY_PATH) then 
    setenv LIBRARY_PATH "${IVI_LIBRARY_PATH}"
endif 

##############################################################################

# Many configures use these. 
setenv LDFLAGS "-L${INSTALL_LOAD_PATH}" 
setenv CFLAGS  "-I${INSTALL_INCLUDE_PATH}"

make distclean

# Configure scripts vary a lot in their options. Things that we need for one
# will break another. One strategy is to start with the version below, see what
# options are invalid and remove them. Relatively often you will have to hack
# the opptions further to get what you want. 
#
# Common problems (add yours here).
#     --includedir is sometimes call --incdir 
#
#     Sometines you will want to use 
#          --datarootdir=${INSTALL_DATA_PATH}
#     but this is often not used and typically causes an error exit.  We have
#     not yet established final value for INSTALL_DATA_PATH, and if you need it,
#     please bring it to the attention of the sw mail list.
#
#     It is possible (no current examples) that the trailing slashes in our variables ending in
#     "_DIR" might break something. You could try something like:
#           setenv INSTALL_PREFIX_PATH  `echo ${INSTALL_PREFIX_PATH} | sed 's#\([^/]\)/*$#\1#'`
#           setenv INSTALL_BIN_PATH  `echo ${INSTALL_BIN_PATH} | sed 's#\([^/]\)/*$#\1#'`
#           setevn INSTALL_LOAD_PATH  `echo ${INSTALL_LOAD_PATH} | sed 's#\([^/]\)/*$#\1#'`
#           setenv INSTALL_INCLUDE_PATH  `echo ${INSTALL_INCLUDE_PATH} | sed 's#\([^/]\)/*$#\1#'`

./configure --prefix=${INSTALL_PREFIX_PATH} --libdir=${INSTALL_LOAD_PATH} --includedir=${INSTALL_INCLUDE_PATH} --bindir=${INSTALL_BIN_PATH} --enable-shared=no --enable-static=yes

make clean
make 
make install

